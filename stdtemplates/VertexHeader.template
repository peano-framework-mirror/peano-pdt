// This file is part of the Peano project. For conditions of distribution and 
// use, please see the copyright notice at www.peano-framework.org
#ifndef ___INCLUDE_GUARD_PREFIX___VERTEX_H_ 
#define ___INCLUDE_GUARD_PREFIX___VERTEX_H_


#include "__PROJECT_PATH__/records/Vertex.h"
#include "peano/grid/Vertex.h"
#include "peano/grid/VertexEnumerator.h"
#include "peano/utils/Globals.h"


__OPEN_NAMESPACE__ 
      class Vertex; 
__CLOSE_NAMESPACE__


/**
 * Blueprint for grid vertex.
 * 
 * This file has originally been created by the PDT and may be manually extended to 
 * the needs of your application. We do not recommend to remove anything!
 */
class __NAMESPACE__::Vertex: public peano::grid::Vertex< __NAMESPACE__::records::Vertex > { 
  private: 
    typedef class peano::grid::Vertex< __NAMESPACE__::records::Vertex >  Base;

  public:
    /**
     * Default Constructor
     *
     * This constructor is required by the framework's data container. Do not 
     * remove it.
     */
    Vertex();
    
    /**
     * This constructor should not set any attributes. It is used by the 
     * traversal algorithm whenever it allocates an array whose elements 
     * will be overwritten later anyway.  
     */
    Vertex(const Base::DoNotCallStandardConstructor&);
    
    /**
     * Constructor
     *
     * This constructor is required by the framework's data container. Do not 
     * remove it. It is kind of a copy constructor that converts an object which 
     * comprises solely persistent attributes into a full attribute. This very 
     * functionality is implemented within the super type, i.e. this constructor 
     * has to invoke the correponsing super type's constructor and not the super 
     * type standard constructor.
     */
    Vertex(const Base::PersistentVertex& argument);
    
   __x__READ_SCALAR_OPERATION__ static tarch::la::Vector<TWO_POWER_D,double>  read__READ_SCALAR_OPERATION__(const peano::grid::VertexEnumerator& enumerator, const Vertex* const vertices);
   __x__READ_VECTOR_OPERATION__ static tarch::la::Vector<TWO_POWER_D_TIMES_D,double> read__READ_VECTOR_OPERATION__(const peano::grid::VertexEnumerator& enumerator, const Vertex* const vertices);
   __x__READ_VECTOR_TWO_POW_D_OPERATION__ static tarch::la::Vector<TWO_POWER_D_TIMES_TWO_POWER_D,double> read__READ_VECTOR_TWO_POW_D_OPERATION__(const peano::grid::VertexEnumerator& enumerator, const Vertex* const vertices);
   __x__READ_STENCIL_OPERATION__ static tarch::la::Vector<TWO_POWER_D_TIMES_THREE_POWER_D,double> read__READ_STENCIL_OPERATION__(const peano::grid::VertexEnumerator& enumerator, const Vertex* const vertices);
   __x__READ_INTERGRID_OPERATOR_OPERATION__ static tarch::la::Vector<TWO_POWER_D_TIMES_FIVE_POWER_D,double> read__READ_INTERGRID_OPERATOR_OPERATION__(const peano::grid::VertexEnumerator& enumerator, const Vertex* const vertices);


   __x__WRITE_SCALAR_OPERATION__ static void write__WRITE_SCALAR_OPERATION__(const peano::grid::VertexEnumerator& enumerator, Vertex* const vertices, const tarch::la::Vector<TWO_POWER_D,double>& values );
   __x__WRITE_VECTOR_OPERATION__ static void write__WRITE_VECTOR_OPERATION__(const peano::grid::VertexEnumerator& enumerator, Vertex* const vertices, const tarch::la::Vector<TWO_POWER_D_TIMES_D,double>& values);
   __x__WRITE_VECTOR_TWO_POW_D_OPERATION__ static void write__WRITE_VECTOR_TWO_POW_D_OPERATION__(const peano::grid::VertexEnumerator& enumerator, Vertex* const vertices, const tarch::la::Vector<TWO_POWER_D_TIMES_TWO_POWER_D,double>& values);
   __x__WRITE_STENCIL_OPERATION__ static void write__WRITE_STENCIL_OPERATION__(const peano::grid::VertexEnumerator& enumerator, Vertex* const vertices, const tarch::la::Vector<TWO_POWER_D_TIMES_THREE_POWER_D,double>& values);
   __x__WRITE_INTERGRID_OPERATOR_OPERATION__ static void write__WRITE_INTERGRID_OPERATOR_OPERATION__(const peano::grid::VertexEnumerator& enumerator, Vertex* const vertices, const tarch::la::Vector<TWO_POWER_D_TIMES_FIVE_POWER_D,double>& values);

};


#endif
