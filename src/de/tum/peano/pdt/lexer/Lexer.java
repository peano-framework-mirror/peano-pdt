/* This file was generated by SableCC (http://www.sablecc.org/). */

package de.tum.peano.pdt.lexer;

import java.io.*;
import de.tum.peano.pdt.node.*;

@SuppressWarnings("nls")
public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    @SuppressWarnings("unused")
    protected void filter() throws LexerException, IOException
    {
        // Do nothing
    }

    public Lexer(@SuppressWarnings("hiding") PushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        return this.token;
    }

    public Token next() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        Token result = this.token;
        this.token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = this.pos;
        int start_line = this.line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        @SuppressWarnings("hiding") int[][][] gotoTable = Lexer.gotoTable[this.state.id()];
        @SuppressWarnings("hiding") int[] accept = Lexer.accept[this.state.id()];
        this.text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(this.cr)
                    {
                        this.cr = false;
                    }
                    else
                    {
                        this.line++;
                        this.pos = 0;
                    }
                    break;
                case 13:
                    this.line++;
                    this.pos = 0;
                    this.cr = true;
                    break;
                default:
                    this.pos++;
                    this.cr = false;
                    break;
                }

                this.text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = this.text.length();
                    accept_pos = this.pos;
                    accept_line = this.line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            @SuppressWarnings("hiding") Token token = new0(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            @SuppressWarnings("hiding") Token token = new1(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            @SuppressWarnings("hiding") Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            @SuppressWarnings("hiding") Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            @SuppressWarnings("hiding") Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            @SuppressWarnings("hiding") Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            @SuppressWarnings("hiding") Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            @SuppressWarnings("hiding") Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            @SuppressWarnings("hiding") Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            @SuppressWarnings("hiding") Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            @SuppressWarnings("hiding") Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            @SuppressWarnings("hiding") Token token = new11(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            @SuppressWarnings("hiding") Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            @SuppressWarnings("hiding") Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            @SuppressWarnings("hiding") Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            @SuppressWarnings("hiding") Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            @SuppressWarnings("hiding") Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            @SuppressWarnings("hiding") Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            @SuppressWarnings("hiding") Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            @SuppressWarnings("hiding") Token token = new19(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            @SuppressWarnings("hiding") Token token = new20(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            @SuppressWarnings("hiding") Token token = new21(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            @SuppressWarnings("hiding") Token token = new22(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            @SuppressWarnings("hiding") Token token = new23(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            @SuppressWarnings("hiding") Token token = new24(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            @SuppressWarnings("hiding") Token token = new25(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(this.text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + this.text);
                    }

                    @SuppressWarnings("hiding") EOF token = new EOF(
                        start_line + 1,
                        start_pos + 1);
                    return token;
                }
            }
        }
    }

    Token new0(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenConfigTag(line, pos); }
    Token new1(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenVertex(line, pos); }
    Token new2(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenCell(line, pos); }
    Token new3(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenState(line, pos); }
    Token new4(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenComponent(line, pos); }
    Token new5(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenNamespace(line, pos); }
    Token new6(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenRead(line, pos); }
    Token new7(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenWrite(line, pos); }
    Token new8(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenScalar(line, pos); }
    Token new9(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenVectorD(line, pos); }
    Token new10(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenVectorTwoPowD(line, pos); }
    Token new11(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenStencil(line, pos); }
    Token new12(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenName(line, pos); }
    Token new13(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenDastgenFile(line, pos); }
    Token new14(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenRepository(line, pos); }
    Token new15(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenEventMapping(line, pos); }
    Token new16(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenAdapter(line, pos); }
    Token new17(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenMergeWithUserDefinedAdapter(line, pos); }
    Token new18(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenMergeWithPredefinedAdapter(line, pos); }
    Token new19(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBlank(text, line, pos); }
    Token new20(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIdentifier(text, line, pos); }
    Token new21(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TFilename(text, line, pos); }
    Token new22(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNamespace(text, line, pos); }
    Token new23(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTraditionalComment(text, line, pos); }
    Token new24(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDocumentationComment(text, line, pos); }
    Token new25(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEndOfLineComment(text, line, pos); }

    private int getChar() throws IOException
    {
        if(this.eof)
        {
            return -1;
        }

        int result = this.in.read();

        if(result == -1)
        {
            this.eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = this.text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            this.eof = false;

            this.in.unread(this.text.charAt(i));
        }
    }

    protected void unread(@SuppressWarnings("hiding") Token token) throws IOException
    {
        @SuppressWarnings("hiding") String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            this.eof = false;

            this.in.unread(text.charAt(i));
        }

        this.pos = token.getPos() - 1;
        this.line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(this.text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {45, 45, 5}, {46, 46, 6}, {47, 47, 7}, {48, 57, 8}, {65, 90, 9}, {95, 95, 10}, {97, 97, 11}, {98, 98, 9}, {99, 99, 12}, {100, 100, 13}, {101, 101, 14}, {102, 108, 9}, {109, 109, 15}, {110, 110, 16}, {111, 113, 9}, {114, 114, 17}, {115, 115, 18}, {116, 117, 9}, {118, 118, 19}, {119, 119, 20}, {120, 122, 9}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{45, 45, 5}, {46, 46, 21}, {47, 47, 22}, {48, 57, 23}, {65, 90, 24}, {95, 95, 25}, {97, 122, 24}, },
            {{45, 46, -2}, {47, 47, 22}, {48, 57, 8}, {58, 58, 26}, {65, 90, 27}, {95, 95, 28}, {97, 122, 27}, },
            {{42, 42, 29}, {45, 46, -7}, {47, 47, 30}, {48, 122, -7}, },
            {{45, 122, -8}, },
            {{45, 47, -8}, {48, 57, 31}, {58, 58, 26}, {65, 90, 32}, {95, 95, 33}, {97, 122, 32}, },
            {{45, 122, -11}, },
            {{45, 95, -11}, {97, 99, 32}, {100, 100, 34}, {101, 122, 32}, },
            {{45, 95, -11}, {97, 100, 32}, {101, 101, 35}, {102, 110, 32}, {111, 111, 36}, {112, 122, 32}, },
            {{45, 95, -11}, {97, 97, 37}, {98, 122, 32}, },
            {{45, 95, -11}, {97, 117, 32}, {118, 118, 38}, {119, 122, 32}, },
            {{45, 100, -14}, {101, 101, 39}, {102, 122, 32}, },
            {{45, 95, -11}, {97, 97, 40}, {98, 122, 32}, },
            {{45, 100, -14}, {101, 101, 41}, {102, 122, 32}, },
            {{45, 95, -11}, {97, 98, 32}, {99, 99, 42}, {100, 115, 32}, {116, 116, 43}, {117, 122, 32}, },
            {{45, 100, -14}, {101, 101, 44}, {102, 122, 32}, },
            {{45, 95, -11}, {97, 113, 32}, {114, 114, 45}, {115, 122, 32}, },
            {{45, 122, -7}, },
            {{45, 46, -7}, {48, 122, -7}, },
            {{45, 122, -7}, },
            {{45, 122, -7}, },
            {{45, 122, -7}, },
            {{58, 58, 46}, },
            {{45, 122, -8}, },
            {{45, 122, -8}, },
            {{0, 41, 47}, {42, 42, 48}, {43, 127, 47}, },
            {{0, 9, 49}, {10, 10, 50}, {11, 12, 49}, {13, 13, 51}, {14, 127, 49}, },
            {{45, 122, -11}, },
            {{45, 122, -11}, },
            {{45, 122, -11}, },
            {{45, 95, -11}, {97, 97, 52}, {98, 122, 32}, },
            {{45, 95, -11}, {97, 107, 32}, {108, 108, 53}, {109, 122, 32}, },
            {{45, 95, -11}, {97, 108, 32}, {109, 109, 54}, {110, 110, 55}, {111, 122, 32}, },
            {{45, 95, -11}, {97, 114, 32}, {115, 115, 56}, {116, 122, 32}, },
            {{45, 100, -14}, {101, 101, 57}, {102, 122, 32}, },
            {{45, 113, -22}, {114, 114, 58}, {115, 122, 32}, },
            {{45, 108, -38}, {109, 109, 59}, {110, 122, 32}, },
            {{45, 95, -11}, {97, 97, 60}, {98, 111, 32}, {112, 112, 61}, {113, 122, 32}, },
            {{45, 95, -11}, {97, 97, 62}, {98, 122, 32}, },
            {{45, 95, -11}, {97, 97, 63}, {98, 100, 32}, {101, 101, 64}, {102, 122, 32}, },
            {{45, 98, -20}, {99, 99, 65}, {100, 113, 32}, {114, 114, 66}, {115, 122, 32}, },
            {{45, 95, -11}, {97, 104, 32}, {105, 105, 67}, {106, 122, 32}, },
            {{46, 46, 68}, {48, 57, 69}, {65, 90, 70}, {95, 95, 71}, {97, 122, 70}, },
            {{0, 41, 47}, {42, 42, 72}, {43, 127, 47}, },
            {{0, 41, 73}, {42, 42, 74}, {43, 46, 73}, {47, 47, 75}, {48, 127, 73}, },
            {{0, 127, -32}, },
            {},
            {{10, 10, 76}, },
            {{45, 95, -11}, {97, 111, 32}, {112, 112, 77}, {113, 122, 32}, },
            {{45, 107, -37}, {108, 108, 78}, {109, 122, 32}, },
            {{45, 111, -54}, {112, 112, 79}, {113, 122, 32}, },
            {{45, 95, -11}, {97, 101, 32}, {102, 102, 80}, {103, 122, 32}, },
            {{45, 95, -11}, {97, 115, 32}, {116, 116, 81}, {117, 122, 32}, },
            {{45, 95, -11}, {97, 109, 32}, {110, 110, 82}, {111, 122, 32}, },
            {{45, 95, -11}, {97, 102, 32}, {103, 103, 83}, {104, 122, 32}, },
            {{45, 100, -14}, {101, 101, 84}, {102, 122, 32}, },
            {{45, 99, -13}, {100, 100, 85}, {101, 122, 32}, },
            {{45, 95, -11}, {97, 110, 32}, {111, 111, 86}, {112, 122, 32}, },
            {{45, 107, -37}, {108, 108, 87}, {109, 122, 32}, },
            {{45, 115, -58}, {116, 116, 88}, {117, 122, 32}, },
            {{45, 109, -59}, {110, 110, 89}, {111, 122, 32}, },
            {{45, 115, -58}, {116, 116, 90}, {117, 122, 32}, },
            {{45, 115, -58}, {116, 116, 91}, {117, 122, 32}, },
            {{45, 115, -58}, {116, 116, 92}, {117, 122, 32}, },
            {{46, 57, -48}, {58, 58, 26}, {65, 122, -48}, },
            {{46, 122, -70}, },
            {{46, 122, -70}, },
            {{46, 122, -70}, },
            {{0, 41, 93}, {42, 42, 72}, {43, 46, 93}, {47, 47, 94}, {48, 127, 93}, },
            {{0, 41, 95}, {42, 42, 96}, {43, 127, 95}, },
            {{0, 127, -50}, },
            {},
            {},
            {{45, 115, -58}, {116, 116, 97}, {117, 122, 32}, },
            {{45, 57, -11}, {58, 58, 98}, {65, 122, -11}, },
            {{45, 110, -63}, {111, 111, 99}, {112, 122, 32}, },
            {{45, 104, -47}, {105, 105, 100}, {106, 122, 32}, },
            {{45, 102, -60}, {103, 103, 101}, {104, 122, 32}, },
            {{45, 115, -58}, {116, 116, 102}, {117, 122, 32}, },
            {{45, 100, -14}, {101, 101, 103}, {102, 122, 32}, },
            {{45, 57, -11}, {58, 58, 104}, {65, 114, -39}, {115, 115, 105}, {116, 122, 32}, },
            {{45, 122, -11}, },
            {{45, 114, -39}, {115, 115, 106}, {116, 122, 32}, },
            {{45, 95, -11}, {97, 97, 107}, {98, 122, 32}, },
            {{45, 100, -14}, {101, 101, 108}, {102, 122, 32}, },
            {{45, 98, -20}, {99, 99, 109}, {100, 122, 32}, },
            {{45, 110, -63}, {111, 111, 110}, {112, 122, 32}, },
            {{45, 100, -14}, {101, 101, 111}, {102, 122, 32}, },
            {{45, 100, -14}, {101, 101, 112}, {102, 122, 32}, },
            {{0, 41, 113}, {42, 42, 114}, {43, 127, 113}, },
            {},
            {{0, 127, -75}, },
            {{0, 41, 73}, {42, 42, 96}, {43, 127, -50}, },
            {{45, 100, -14}, {101, 101, 115}, {102, 122, 32}, },
            {{58, 58, 46}, },
            {{45, 109, -59}, {110, 110, 116}, {111, 122, 32}, },
            {{45, 102, -60}, {103, 103, 117}, {104, 122, 32}, },
            {{45, 100, -14}, {101, 101, 118}, {102, 122, 32}, },
            {{45, 45, 119}, {46, 122, -11}, },
            {{45, 45, 120}, {46, 122, -11}, },
            {{58, 58, 46}, },
            {{45, 111, -54}, {112, 112, 121}, {113, 122, 32}, },
            {{45, 104, -47}, {105, 105, 122}, {106, 122, 32}, },
            {{45, 113, -22}, {114, 114, 123}, {115, 122, 32}, },
            {{45, 57, -11}, {58, 58, 124}, {65, 122, -11}, },
            {{45, 104, -47}, {105, 105, 125}, {106, 122, 32}, },
            {{45, 113, -22}, {114, 114, 126}, {115, 122, 32}, },
            {{45, 95, -11}, {97, 119, 32}, {120, 120, 127}, {121, 122, 32}, },
            {{45, 122, -11}, },
            {{0, 127, -95}, },
            {{0, 41, 93}, {42, 42, 114}, {43, 127, -74}, },
            {{45, 113, -22}, {114, 114, 128}, {115, 122, 32}, },
            {{45, 100, -14}, {101, 101, 129}, {102, 122, 32}, },
            {{45, 95, -11}, {97, 116, 32}, {117, 117, 130}, {118, 122, 32}, },
            {{45, 109, -59}, {110, 110, 131}, {111, 122, 32}, },
            {{45, 95, -7}, {97, 108, 24}, {109, 109, 132}, {110, 122, 24}, },
            {{45, 95, -7}, {97, 118, 24}, {119, 119, 133}, {120, 122, 24}, },
            {{45, 95, -11}, {97, 97, 134}, {98, 122, 32}, },
            {{45, 115, -58}, {116, 116, 135}, {117, 122, 32}, },
            {{45, 57, -11}, {58, 58, 136}, {65, 122, -11}, },
            {{58, 58, 46}, },
            {{45, 107, -37}, {108, 108, 137}, {109, 122, 32}, },
            {{45, 47, -8}, {48, 49, 31}, {50, 50, 138}, {51, 57, 31}, {58, 58, 139}, {65, 122, -11}, },
            {{45, 57, -11}, {58, 58, 140}, {65, 122, -11}, },
            {{45, 57, -11}, {58, 58, 141}, {65, 122, -11}, },
            {{45, 109, -59}, {110, 110, 142}, {111, 122, 32}, },
            {{45, 113, -22}, {114, 114, 143}, {115, 122, 32}, },
            {{45, 45, 144}, {46, 122, -11}, },
            {{45, 95, -7}, {97, 97, 145}, {98, 122, 24}, },
            {{45, 95, -7}, {97, 104, 24}, {105, 105, 146}, {106, 122, 24}, },
            {{45, 98, -20}, {99, 99, 147}, {100, 122, 32}, },
            {{45, 110, -63}, {111, 111, 148}, {112, 122, 32}, },
            {{58, 58, 46}, },
            {{45, 57, -11}, {58, 58, 149}, {65, 122, -11}, },
            {{45, 58, -11}, {65, 79, 32}, {80, 80, 150}, {81, 90, 32}, {95, 122, -11}, },
            {{58, 58, 46}, },
            {{58, 58, 46}, },
            {{58, 58, 46}, },
            {{45, 115, -58}, {116, 116, 151}, {117, 122, 32}, },
            {{45, 95, -11}, {97, 97, 152}, {98, 122, 32}, },
            {{45, 95, -7}, {97, 101, 24}, {102, 102, 153}, {103, 122, 24}, },
            {{45, 95, -7}, {97, 111, 24}, {112, 112, 154}, {113, 122, 24}, },
            {{45, 95, -7}, {97, 115, 24}, {116, 116, 155}, {117, 122, 24}, },
            {{45, 100, -14}, {101, 101, 156}, {102, 122, 32}, },
            {{45, 113, -22}, {114, 114, 157}, {115, 122, 32}, },
            {{58, 58, 46}, },
            {{45, 110, -63}, {111, 111, 158}, {112, 122, 32}, },
            {{45, 57, -11}, {58, 58, 159}, {65, 122, -11}, },
            {{45, 115, -58}, {116, 116, 160}, {117, 122, 32}, },
            {{45, 104, -135}, {105, 105, 161}, {106, 122, 24}, },
            {{45, 111, -147}, {112, 112, 162}, {113, 122, 24}, },
            {{45, 95, -7}, {97, 103, 24}, {104, 104, 163}, {105, 122, 24}, },
            {{45, 57, -11}, {58, 58, 164}, {65, 122, -11}, },
            {{45, 95, -11}, {97, 120, 32}, {121, 121, 165}, {122, 122, 32}, },
            {{45, 95, -11}, {97, 118, 32}, {119, 119, 166}, {120, 122, 32}, },
            {{58, 58, 46}, },
            {{45, 104, -47}, {105, 105, 167}, {106, 122, 32}, },
            {{45, 95, -7}, {97, 107, 24}, {108, 108, 168}, {109, 122, 24}, },
            {{45, 104, -135}, {105, 105, 169}, {106, 122, 24}, },
            {{45, 45, 170}, {46, 122, -7}, },
            {{58, 58, 46}, },
            {{45, 57, -11}, {58, 58, 171}, {65, 122, -11}, },
            {{45, 58, -11}, {65, 67, 32}, {68, 68, 172}, {69, 90, 32}, {95, 122, -11}, },
            {{45, 110, -63}, {111, 111, 173}, {112, 122, 32}, },
            {{45, 95, -7}, {97, 100, 24}, {101, 101, 174}, {102, 122, 24}, },
            {{45, 95, -7}, {97, 109, 24}, {110, 110, 175}, {111, 122, 24}, },
            {{45, 111, -147}, {112, 112, 176}, {113, 116, 24}, {117, 117, 177}, {118, 122, 24}, },
            {{58, 58, 46}, },
            {{45, 57, -11}, {58, 58, 178}, {65, 122, -11}, },
            {{45, 109, -59}, {110, 110, 179}, {111, 122, 32}, },
            {{45, 57, -7}, {58, 58, 180}, {65, 122, -7}, },
            {{45, 95, -7}, {97, 102, 24}, {103, 103, 181}, {104, 122, 24}, },
            {{45, 95, -7}, {97, 113, 24}, {114, 114, 182}, {115, 122, 24}, },
            {{45, 95, -7}, {97, 114, 24}, {115, 115, 183}, {116, 122, 24}, },
            {{58, 58, 46}, },
            {{45, 45, 184}, {46, 122, -11}, },
            {},
            {{45, 57, -7}, {58, 58, 185}, {65, 122, -7}, },
            {{45, 100, -170}, {101, 101, 186}, {102, 122, 24}, },
            {{45, 100, -170}, {101, 101, 187}, {102, 122, 24}, },
            {{45, 115, -148}, {116, 116, 188}, {117, 122, 24}, },
            {},
            {{45, 95, -7}, {97, 99, 24}, {100, 100, 189}, {101, 122, 24}, },
            {{45, 113, -178}, {114, 114, 190}, {115, 122, 24}, },
            {{45, 95, -7}, {97, 97, 191}, {98, 122, 24}, },
            {{45, 100, -170}, {101, 101, 192}, {102, 122, 24}, },
            {{45, 45, 193}, {46, 122, -7}, },
            {{45, 102, -177}, {103, 103, 194}, {104, 122, 24}, },
            {{45, 101, -146}, {102, 102, 195}, {103, 122, 24}, },
            {{45, 99, -188}, {100, 100, 196}, {101, 122, 24}, },
            {{45, 57, -7}, {58, 58, 197}, {65, 122, -7}, },
            {{45, 104, -135}, {105, 105, 198}, {106, 122, 24}, },
            {{45, 100, -170}, {101, 101, 199}, {102, 122, 24}, },
            {},
            {{45, 109, -171}, {110, 110, 200}, {111, 122, 24}, },
            {{45, 101, -146}, {102, 102, 201}, {103, 122, 24}, },
            {{45, 100, -170}, {101, 101, 202}, {102, 122, 24}, },
            {{45, 104, -135}, {105, 105, 203}, {106, 122, 24}, },
            {{45, 99, -188}, {100, 100, 204}, {101, 122, 24}, },
            {{45, 109, -171}, {110, 110, 205}, {111, 122, 24}, },
            {{45, 45, 206}, {46, 122, -7}, },
            {{45, 100, -170}, {101, 101, 207}, {102, 122, 24}, },
            {{45, 108, -121}, {109, 109, 208}, {110, 122, 24}, },
            {{45, 99, -188}, {100, 100, 209}, {101, 122, 24}, },
            {{45, 95, -7}, {97, 97, 210}, {98, 122, 24}, },
            {{45, 45, 211}, {46, 122, -7}, },
            {{45, 111, -147}, {112, 112, 212}, {113, 122, 24}, },
            {{45, 108, -121}, {109, 109, 213}, {110, 122, 24}, },
            {{45, 111, -147}, {112, 112, 214}, {113, 122, 24}, },
            {{45, 95, -7}, {97, 97, 215}, {98, 122, 24}, },
            {{45, 104, -135}, {105, 105, 216}, {106, 122, 24}, },
            {{45, 111, -147}, {112, 112, 217}, {113, 122, 24}, },
            {{45, 109, -171}, {110, 110, 218}, {111, 122, 24}, },
            {{45, 111, -147}, {112, 112, 219}, {113, 122, 24}, },
            {{45, 102, -177}, {103, 103, 220}, {104, 122, 24}, },
            {{45, 104, -135}, {105, 105, 221}, {106, 122, 24}, },
            {{45, 57, -7}, {58, 58, 222}, {65, 122, -7}, },
            {{45, 109, -171}, {110, 110, 223}, {111, 122, 24}, },
            {},
            {{45, 102, -177}, {103, 103, 224}, {104, 122, 24}, },
            {{45, 57, -7}, {58, 58, 225}, {65, 122, -7}, },
            {},
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {-1, 19, 19, 19, 19, 21, 21, -1, 21, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, -1, 21, 21, 21, -1, 21, 21, -1, -1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, -1, -1, -1, -1, 25, 25, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 22, 22, 22, 22, -1, -1, -1, 24, 25, 20, 20, 20, 20, 20, 20, 20, 20, 6, 20, 20, 20, 20, 20, 20, 20, -1, 23, -1, -1, 20, 2, 20, 20, 20, 20, 20, 12, 20, 20, 20, 20, 20, 20, 20, 7, -1, -1, 20, 20, 20, 20, 21, 21, 20, 20, 20, 3, 20, 20, 20, 20, 20, 20, 20, 21, 21, 20, 20, 8, 20, 20, 9, 1, 16, 20, 20, 21, 21, 21, 20, 20, 11, 20, 20, 20, 21, 21, 21, 20, 20, 20, 4, 20, 21, 21, 21, 5, 20, 20, 20, 21, 21, 21, 14, 20, 20, 21, 21, 21, 21, 10, 20, 13, 21, 21, 21, 21, 15, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 0, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 18, 21, 21, 17, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(@SuppressWarnings("hiding") int id)
        {
            this.id = id;
        }

        public int id()
        {
            return this.id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
