#include "__PROJECT_PATH__/Vertex.h"
#include "peano/utils/Loop.h"
#include "peano/grid/Checkpoint.h"


__NAMESPACE__::Vertex::Vertex():
  Base() { 
  // @todo Insert your code here
}


__NAMESPACE__::Vertex::Vertex(const Base::DoNotCallStandardConstructor& value):
  Base(value) { 
  // Please do not insert anything here
}


__NAMESPACE__::Vertex::Vertex(const Base::PersistentVertex& argument):
  Base(argument) {
  // @todo Insert your code here
}


__x__READ_SCALAR_OPERATION_DOUBLE__ tarch::la::Vector<TWO_POWER_D,double> __NAMESPACE__::Vertex::read__READ_SCALAR_OPERATION_DOUBLE__(const peano::grid::VertexEnumerator& enumerator, const Vertex* const vertices) { tarch::la::Vector<TWO_POWER_D,double> result; dfor2(x) result(xScalar) = vertices[ enumerator(x) ]._vertexData.get__READ_SCALAR_OPERATION_DOUBLE__(); enddforx return result; }

__x__READ_VECTOR_OPERATION_DOUBLE__ tarch::la::Vector<TWO_POWER_D_TIMES_D,double>  __NAMESPACE__::Vertex::read__READ_VECTOR_OPERATION_DOUBLE__(const peano::grid::VertexEnumerator& enumerator, const Vertex* const vertices)  { tarch::la::Vector<TWO_POWER_D_TIMES_D,double> result; dfor2(x) tarch::la::slice(result,vertices[ enumerator(x) ]._vertexData.get__READ_VECTOR_OPERATION_DOUBLE__(),xScalar*DIMENSIONS); enddforx return result; }

__x__READ_VECTOR_TWO_POW_D_OPERATION_DOUBLE__ tarch::la::Vector<TWO_POWER_D_TIMES_TWO_POWER_D,double>  __NAMESPACE__::Vertex::read__READ_VECTOR_TWO_POW_D_OPERATION_DOUBLE__(const peano::grid::VertexEnumerator& enumerator, const Vertex* const vertices)  { tarch::la::Vector<TWO_POWER_D_TIMES_TWO_POWER_D,double> result; dfor2(x) tarch::la::slice(result,vertices[ enumerator(x) ]._vertexData.get__READ_VECTOR_TWO_POW_D_OPERATION_DOUBLE__(),xScalar*TWO_POWER_D); enddforx return result; }

__x__READ_STENCIL_OPERATION_DOUBLE__ tarch::la::Vector<TWO_POWER_D_TIMES_THREE_POWER_D,double>  __NAMESPACE__::Vertex::read__READ_STENCIL_OPERATION_DOUBLE__(const peano::grid::VertexEnumerator& enumerator, const Vertex* const vertices)  { tarch::la::Vector<TWO_POWER_D_TIMES_THREE_POWER_D,double> result; dfor2(x) tarch::la::slice(result,vertices[ enumerator(x) ]._vertexData.get__READ_STENCIL_OPERATION_DOUBLE__(),xScalar*THREE_POWER_D); enddforx return result; }

__x__READ_INTERGRID_OPERATOR_OPERATION_DOUBLE__ tarch::la::Vector<TWO_POWER_D_TIMES_FIVE_POWER_D,double>  __NAMESPACE__::Vertex::read__READ_INTERGRID_OPERATOR_OPERATION_DOUBLE__(const peano::grid::VertexEnumerator& enumerator, const Vertex* const vertices)  { tarch::la::Vector<TWO_POWER_D_TIMES_FIVE_POWER_D,double> result; dfor2(x) tarch::la::slice(result,vertices[ enumerator(x) ]._vertexData.get__READ_INTERGRID_OPERATOR_OPERATION_DOUBLE__(),xScalar*FIVE_POWER_D); enddforx return result; }

__x__WRITE_SCALAR_OPERATION_DOUBLE__ void __NAMESPACE__::Vertex::write__WRITE_SCALAR_OPERATION_DOUBLE__(const peano::grid::VertexEnumerator& enumerator, Vertex* const vertices, const tarch::la::Vector<TWO_POWER_D,double>& values ) { dfor2(x) vertices[ enumerator(x) ]._vertexData.set__WRITE_SCALAR_OPERATION_DOUBLE__( values(xScalar) ); enddforx }

__x__WRITE_VECTOR_OPERATION_DOUBLE__ void __NAMESPACE__::Vertex::write__WRITE_VECTOR_OPERATION_DOUBLE__(const peano::grid::VertexEnumerator& enumerator, Vertex* const vertices, const tarch::la::Vector<TWO_POWER_D_TIMES_D,double>& values) { dfor2(x) tarch::la::Vector<DIMENSIONS,double> temp = tarch::la::slice<DIMENSIONS>(values,xScalar*DIMENSIONS); vertices[ enumerator(x) ]._vertexData.set__WRITE_VECTOR_OPERATION_DOUBLE__( temp ); enddforx }

__x__WRITE_VECTOR_TWO_POW_D_OPERATION_DOUBLE__ void __NAMESPACE__::Vertex::write__WRITE_VECTOR_TWO_POW_D_OPERATION_DOUBLE__(const peano::grid::VertexEnumerator& enumerator, Vertex* const vertices, const tarch::la::Vector<TWO_POWER_D_TIMES_TWO_POWER_D,double>& values) { dfor2(x) tarch::la::Vector<TWO_POWER_D,double> temp = tarch::la::slice<TWO_POWER_D>(values,xScalar*TWO_POWER_D); vertices[ enumerator(x) ]._vertexData.set__WRITE_VECTOR_TWO_POW_D_OPERATION_DOUBLE__( temp ); enddforx }

__x__WRITE_STENCIL_OPERATION_DOUBLE__ void __NAMESPACE__::Vertex::write__WRITE_STENCIL_OPERATION_DOUBLE__(const peano::grid::VertexEnumerator& enumerator, Vertex* const vertices, const tarch::la::Vector<TWO_POWER_D_TIMES_THREE_POWER_D,double>& values) { dfor2(x) tarch::la::Vector<THREE_POWER_D,double> temp = tarch::la::slice<THREE_POWER_D>(values,xScalar*THREE_POWER_D); vertices[ enumerator(x) ]._vertexData.set__WRITE_STENCIL_OPERATION_DOUBLE__( temp ); enddforx }

__x__WRITE_INTERGRID_OPERATOR_OPERATION_DOUBLE__ void __NAMESPACE__::Vertex::write__WRITE_INTERGRID_OPERATOR_OPERATION_DOUBLE__(const peano::grid::VertexEnumerator& enumerator, Vertex* const vertices, const tarch::la::Vector<TWO_POWER_D_TIMES_FIVE_POWER_D,double>& values) { dfor2(x) tarch::la::Vector<FIVE_POWER_D,double> temp = tarch::la::slice<FIVE_POWER_D>(values,xScalar*FIVE_POWER_D); vertices[ enumerator(x) ]._vertexData.set__WRITE_INTERGRID_OPERATOR_OPERATION_DOUBLE__( temp ); enddforx }



__x__READ_SCALAR_OPERATION_INT__ tarch::la::Vector<TWO_POWER_D,int> __NAMESPACE__::Vertex::read__READ_SCALAR_OPERATION_INT__(const peano::grid::VertexEnumerator& enumerator, const Vertex* const vertices) { tarch::la::Vector<TWO_POWER_D,int> result; dfor2(x) result(xScalar) = vertices[ enumerator(x) ]._vertexData.get__READ_SCALAR_OPERATION_INT__(); enddforx return result; }

__x__READ_VECTOR_OPERATION_INT__ tarch::la::Vector<TWO_POWER_D_TIMES_D,int>  __NAMESPACE__::Vertex::read__READ_VECTOR_OPERATION_INT__(const peano::grid::VertexEnumerator& enumerator, const Vertex* const vertices)  { tarch::la::Vector<TWO_POWER_D_TIMES_D,int> result; dfor2(x) tarch::la::slice(result,vertices[ enumerator(x) ]._vertexData.get__READ_VECTOR_OPERATION_INT__(),xScalar*DIMENSIONS); enddforx return result; }

__x__READ_VECTOR_TWO_POW_D_OPERATION_INT__ tarch::la::Vector<TWO_POWER_D_TIMES_TWO_POWER_D,int>  __NAMESPACE__::Vertex::read__READ_VECTOR_TWO_POW_D_OPERATION_INT__(const peano::grid::VertexEnumerator& enumerator, const Vertex* const vertices)  { tarch::la::Vector<TWO_POWER_D_TIMES_TWO_POWER_D,int> result; dfor2(x) tarch::la::slice(result,vertices[ enumerator(x) ]._vertexData.get__READ_VECTOR_TWO_POW_D_OPERATION_INT__(),xScalar*TWO_POWER_D); enddforx return result; }

__x__READ_STENCIL_OPERATION_INT__ tarch::la::Vector<TWO_POWER_D_TIMES_THREE_POWER_D,int>  __NAMESPACE__::Vertex::read__READ_STENCIL_OPERATION_INT__(const peano::grid::VertexEnumerator& enumerator, const Vertex* const vertices)  { tarch::la::Vector<TWO_POWER_D_TIMES_THREE_POWER_D,int> result; dfor2(x) tarch::la::slice(result,vertices[ enumerator(x) ]._vertexData.get__READ_STENCIL_OPERATION_INT__(),xScalar*THREE_POWER_D); enddforx return result; }

__x__READ_INTERGRID_OPERATOR_OPERATION_INT__ tarch::la::Vector<TWO_POWER_D_TIMES_FIVE_POWER_D,int>  __NAMESPACE__::Vertex::read__READ_INTERGRID_OPERATOR_OPERATION_INT__(const peano::grid::VertexEnumerator& enumerator, const Vertex* const vertices)  { tarch::la::Vector<TWO_POWER_D_TIMES_FIVE_POWER_D,int> result; dfor2(x) tarch::la::slice(result,vertices[ enumerator(x) ]._vertexData.get__READ_INTERGRID_OPERATOR_OPERATION_INT__(),xScalar*FIVE_POWER_D); enddforx return result; }

__x__WRITE_SCALAR_OPERATION_INT__ void __NAMESPACE__::Vertex::write__WRITE_SCALAR_OPERATION_INT__(const peano::grid::VertexEnumerator& enumerator, Vertex* const vertices, const tarch::la::Vector<TWO_POWER_D,int>& values ) { dfor2(x) vertices[ enumerator(x) ]._vertexData.set__WRITE_SCALAR_OPERATION_INT__( values(xScalar) ); enddforx }

__x__WRITE_VECTOR_OPERATION_INT__ void __NAMESPACE__::Vertex::write__WRITE_VECTOR_OPERATION_INT__(const peano::grid::VertexEnumerator& enumerator, Vertex* const vertices, const tarch::la::Vector<TWO_POWER_D_TIMES_D,int>& values) { dfor2(x) tarch::la::Vector<DIMENSIONS,int> temp = tarch::la::slice<DIMENSIONS>(values,xScalar*DIMENSIONS); vertices[ enumerator(x) ]._vertexData.set__WRITE_VECTOR_OPERATION_INT__( temp ); enddforx }

__x__WRITE_VECTOR_TWO_POW_D_OPERATION_INT__ void __NAMESPACE__::Vertex::write__WRITE_VECTOR_TWO_POW_D_OPERATION_INT__(const peano::grid::VertexEnumerator& enumerator, Vertex* const vertices, const tarch::la::Vector<TWO_POWER_D_TIMES_TWO_POWER_D,int>& values) { dfor2(x) tarch::la::Vector<TWO_POWER_D,int> temp = tarch::la::slice<TWO_POWER_D>(values,xScalar*TWO_POWER_D); vertices[ enumerator(x) ]._vertexData.set__WRITE_VECTOR_TWO_POW_D_OPERATION_INT__( temp ); enddforx }

__x__WRITE_STENCIL_OPERATION_INT__ void __NAMESPACE__::Vertex::write__WRITE_STENCIL_OPERATION_INT__(const peano::grid::VertexEnumerator& enumerator, Vertex* const vertices, const tarch::la::Vector<TWO_POWER_D_TIMES_THREE_POWER_D,int>& values) { dfor2(x) tarch::la::Vector<THREE_POWER_D,int> temp = tarch::la::slice<THREE_POWER_D>(values,xScalar*THREE_POWER_D); vertices[ enumerator(x) ]._vertexData.set__WRITE_STENCIL_OPERATION_INT__( temp ); enddforx }

__x__WRITE_INTERGRID_OPERATOR_OPERATION_INT__ void __NAMESPACE__::Vertex::write__WRITE_INTERGRID_OPERATOR_OPERATION_INT__(const peano::grid::VertexEnumerator& enumerator, Vertex* const vertices, const tarch::la::Vector<TWO_POWER_D_TIMES_FIVE_POWER_D,int>& values) { dfor2(x) tarch::la::Vector<FIVE_POWER_D,int> temp = tarch::la::slice<FIVE_POWER_D>(values,xScalar*FIVE_POWER_D); vertices[ enumerator(x) ]._vertexData.set__WRITE_INTERGRID_OPERATOR_OPERATION_INT__( temp ); enddforx }
