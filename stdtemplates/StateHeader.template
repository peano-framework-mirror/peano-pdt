// This file is part of the Peano project. For conditions of distribution and 
// use, please see the copyright notice at www.peano-framework.org
#ifndef ___INCLUDE_GUARD_PREFIX___STATE_H_ 
#define ___INCLUDE_GUARD_PREFIX___STATE_H_

#include "__PROJECT_PATH__/records/State.h"
#include "peano/grid/State.h"

#include "peano/grid/Checkpoint.h"

__OPEN_NAMESPACE__ 
      class State;
      /**
       * Forward declaration
       */
      class Vertex;
      /**
       * Forward declaration
       */
      class Cell;
      
      namespace repositories {
        /** 
         * Forward declaration
         */
        class RepositoryArrayStack;
        class RepositorySTDStack;
      }
__CLOSE_NAMESPACE__


/**
 * Blueprint for solver state.
 * 
 * This file has originally been created by the PDT and may be manually extended to 
 * the needs of your application. We do not recommend to remove anything!
 */
class __NAMESPACE__::State: public peano::grid::State< __NAMESPACE__::records::State > { 
  private: 
    typedef class peano::grid::State< __NAMESPACE__::records::State >  Base;

    /**
     * Needed for checkpointing.
     */
    friend class __NAMESPACE__::repositories::RepositoryArrayStack;
    friend class __NAMESPACE__::repositories::RepositorySTDStack;
  
    void writeToCheckpoint( peano::grid::Checkpoint<Vertex,Cell>&  checkpoint ) const;    
    void readFromCheckpoint( const peano::grid::Checkpoint<Vertex,Cell>&  checkpoint );    
  
  public:
    /**
     * Default Constructor
     *
     * This constructor is required by the framework's data container. Do not 
     * remove it.
     */
    State();

    /**
     * Constructor
     *
     * This constructor is required by the framework's data container. Do not 
     * remove it. It is kind of a copy constructor that converts an object which 
     * comprises solely persistent attributes into a full attribute. This very 
     * functionality is implemented within the super type, i.e. this constructor 
     * has to invoke the correponsing super type's constructor and not the super 
     * type standard constructor.
     */
    State(const Base::PersistentState& argument);

    #ifdef Parallel
    /**
     * Merge worker state with global master state
     * 
     * The state management follows a one-point-holds-it-all policy, i.e. before 
     * and after each iteration, the global master (rank 0) is the only rank 
     * that has a valid state object. Whenever the application starts up, this 
     * valid state object is distributed among the working nodes. Whenever any 
     * node finishes to iterate, it sends back its state to the global master 
     * where all the state objects are merged into one big state object.
     *
     * This operation implements the merge process (the distribution is just a 
     * simple copying), i.e. it is called on the master node only. Implement 
     * your PDE-specific operations such as the computation of a global residual 
     * here but ensure that you also call the super class' merge operation. The 
     * this object is the master's state. The argument is the state that the 
     * node just received from a worker.
     *
     * The description above lacks one fact: If the global reduction is 
     * disabled (see iterate()'s signature), this operation will never be 
     * invoked as the state is not sent back to the master. Please note that 
     * the fork process itself is a non-reducing process, i.e. throughout the 
     * forks, no states are sent back to the masters.  
     */
    void mergeWithWorkerState(const State& workerState);
    #endif
};


#endif
