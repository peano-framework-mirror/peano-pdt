/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.peano.pdt.analysis;

import org.peano.pdt.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseADescription(ADescription node);
    void caseARepository(ARepository node);
    void caseAVertex(AVertex node);
    void caseAReadScalarDoubleOperation(AReadScalarDoubleOperation node);
    void caseAReadVectorDoubleOperation(AReadVectorDoubleOperation node);
    void caseAReadVectorTwoPowDDoubleOperation(AReadVectorTwoPowDDoubleOperation node);
    void caseAReadStencilDoubleOperation(AReadStencilDoubleOperation node);
    void caseAReadIntergridOperatorDoubleOperation(AReadIntergridOperatorDoubleOperation node);
    void caseAWriteScalarDoubleOperation(AWriteScalarDoubleOperation node);
    void caseAWriteVectorDoubleOperation(AWriteVectorDoubleOperation node);
    void caseAWriteVectorTwoPowDDoubleOperation(AWriteVectorTwoPowDDoubleOperation node);
    void caseAWriteStencilDoubleOperation(AWriteStencilDoubleOperation node);
    void caseAWriteIntergridOperatorDoubleOperation(AWriteIntergridOperatorDoubleOperation node);
    void caseAReadScalarIntOperation(AReadScalarIntOperation node);
    void caseAReadVectorIntOperation(AReadVectorIntOperation node);
    void caseAReadVectorTwoPowDIntOperation(AReadVectorTwoPowDIntOperation node);
    void caseAReadStencilIntOperation(AReadStencilIntOperation node);
    void caseAReadIntergridOperatorIntOperation(AReadIntergridOperatorIntOperation node);
    void caseAWriteScalarIntOperation(AWriteScalarIntOperation node);
    void caseAWriteVectorIntOperation(AWriteVectorIntOperation node);
    void caseAWriteVectorTwoPowDIntOperation(AWriteVectorTwoPowDIntOperation node);
    void caseAWriteStencilIntOperation(AWriteStencilIntOperation node);
    void caseAWriteIntergridOperatorIntOperation(AWriteIntergridOperatorIntOperation node);
    void caseACell(ACell node);
    void caseAState(AState node);
    void caseAEventMapping(AEventMapping node);
    void caseAAdapter(AAdapter node);
    void caseAPredefinedAdapter(APredefinedAdapter node);

    void caseTTokenVertex(TTokenVertex node);
    void caseTTokenCell(TTokenCell node);
    void caseTTokenState(TTokenState node);
    void caseTTokenComponent(TTokenComponent node);
    void caseTTokenNamespace(TTokenNamespace node);
    void caseTTokenRead(TTokenRead node);
    void caseTTokenWrite(TTokenWrite node);
    void caseTTokenScalarDouble(TTokenScalarDouble node);
    void caseTTokenScalarInt(TTokenScalarInt node);
    void caseTTokenVectorDDouble(TTokenVectorDDouble node);
    void caseTTokenVectorDInt(TTokenVectorDInt node);
    void caseTTokenVectorTwoPowDDouble(TTokenVectorTwoPowDDouble node);
    void caseTTokenVectorTwoPowDInt(TTokenVectorTwoPowDInt node);
    void caseTTokenVectorFivePowDDouble(TTokenVectorFivePowDDouble node);
    void caseTTokenVectorFivePowDInt(TTokenVectorFivePowDInt node);
    void caseTTokenStencilDouble(TTokenStencilDouble node);
    void caseTTokenStencilInt(TTokenStencilInt node);
    void caseTTokenName(TTokenName node);
    void caseTTokenDastgenFile(TTokenDastgenFile node);
    void caseTTokenEventMapping(TTokenEventMapping node);
    void caseTTokenOpenBracket(TTokenOpenBracket node);
    void caseTTokenCloseBracket(TTokenCloseBracket node);
    void caseTTokenComma(TTokenComma node);
    void caseTTokenAdapter(TTokenAdapter node);
    void caseTTokenMergeWithUserDefinedAdapter(TTokenMergeWithUserDefinedAdapter node);
    void caseTTokenMergeWithPredefinedAdapter(TTokenMergeWithPredefinedAdapter node);
    void caseTBlank(TBlank node);
    void caseTIdentifier(TIdentifier node);
    void caseTFilename(TFilename node);
    void caseTNamespace(TNamespace node);
    void caseTTraditionalComment(TTraditionalComment node);
    void caseTDocumentationComment(TDocumentationComment node);
    void caseTEndOfLineComment(TEndOfLineComment node);
    void caseEOF(EOF node);
}
