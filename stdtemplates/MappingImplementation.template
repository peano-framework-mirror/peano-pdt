#include "__PROJECT_PATH__/mappings/__THIS_TYPENAME__.h"



/**
 * @todo Please tailor the parameters to your mapping's properties.
 */
peano::MappingSpecification   __THIS_QUALIFIED_TYPENAME__::touchVertexLastTimeSpecification() {
  return peano::MappingSpecification(peano::MappingSpecification::WHOLE_TREE,true,false);
}


/**
 * @todo Please tailor the parameters to your mapping's properties.
 */
peano::MappingSpecification   __THIS_QUALIFIED_TYPENAME__::touchVertexFirstTimeSpecification() { 
  return peano::MappingSpecification(peano::MappingSpecification::WHOLE_TREE,true,false);
}


/**
 * @todo Please tailor the parameters to your mapping's properties.
 */
peano::MappingSpecification   __THIS_QUALIFIED_TYPENAME__::enterCellSpecification() {
  return peano::MappingSpecification(peano::MappingSpecification::WHOLE_TREE,true,false);
}


/**
 * @todo Please tailor the parameters to your mapping's properties.
 */
peano::MappingSpecification   __THIS_QUALIFIED_TYPENAME__::leaveCellSpecification() {
  return peano::MappingSpecification(peano::MappingSpecification::WHOLE_TREE,true,false);
}


/**
 * @todo Please tailor the parameters to your mapping's properties.
 */
peano::MappingSpecification   __THIS_QUALIFIED_TYPENAME__::ascendSpecification() {
  return peano::MappingSpecification(peano::MappingSpecification::WHOLE_TREE,true,false);
}


/**
 * @todo Please tailor the parameters to your mapping's properties.
 */
peano::MappingSpecification   __THIS_QUALIFIED_TYPENAME__::descendSpecification() {
  return peano::MappingSpecification(peano::MappingSpecification::WHOLE_TREE,true,false);
}


tarch::logging::Log                __THIS_QUALIFIED_TYPENAME__::_log( "__THIS_QUALIFIED_TYPENAME__" ); 


__THIS_QUALIFIED_TYPENAME__::__THIS_TYPENAME__() {
  logTraceIn( "__THIS_TYPENAME__()" );
  // @todo Insert your code here
  logTraceOut( "__THIS_TYPENAME__()" );
}


__THIS_QUALIFIED_TYPENAME__::~__THIS_TYPENAME__() {
  logTraceIn( "~__THIS_TYPENAME__()" );
  // @todo Insert your code here
  logTraceOut( "~__THIS_TYPENAME__()" );
}


#if defined(SharedMemoryParallelisation)
__THIS_QUALIFIED_TYPENAME__::__THIS_TYPENAME__(const __THIS_TYPENAME__&  masterThread) {
  logTraceIn( "__THIS_TYPENAME__(__THIS_TYPENAME__)" );
  // @todo Insert your code here
  logTraceOut( "__THIS_TYPENAME__(__THIS_TYPENAME__)" );
}


void __THIS_QUALIFIED_TYPENAME__::mergeWithWorkerThread(const __THIS_TYPENAME__& workerThread) {
  logTraceIn( "mergeWithWorkerThread(__THIS_TYPENAME__)" );
  // @todo Insert your code here
  logTraceOut( "mergeWithWorkerThread(__THIS_TYPENAME__)" );
}
#endif


void __THIS_QUALIFIED_TYPENAME__::createHangingVertex(
      __NAMESPACE__::Vertex&     fineGridVertex,
      const tarch::la::Vector<DIMENSIONS,double>&                fineGridX,
      const tarch::la::Vector<DIMENSIONS,double>&                fineGridH,
      __NAMESPACE__::Vertex * const   coarseGridVertices,
      const peano::grid::VertexEnumerator&      coarseGridVerticesEnumerator,
      __NAMESPACE__::Cell&       coarseGridCell,
      const tarch::la::Vector<DIMENSIONS,int>&                   fineGridPositionOfVertex
) {
  logTraceInWith6Arguments( "createHangingVertex(...)", fineGridVertex, fineGridX, fineGridH, coarseGridVerticesEnumerator.toString(), coarseGridCell, fineGridPositionOfVertex );
  // @todo Insert your code here
  logTraceOutWith1Argument( "createHangingVertex(...)", fineGridVertex );
}


void __THIS_QUALIFIED_TYPENAME__::destroyHangingVertex(
      const __NAMESPACE__::Vertex&   fineGridVertex,
      const tarch::la::Vector<DIMENSIONS,double>&                    fineGridX,
      const tarch::la::Vector<DIMENSIONS,double>&                    fineGridH,
      __NAMESPACE__::Vertex * const  coarseGridVertices,
      const peano::grid::VertexEnumerator&          coarseGridVerticesEnumerator,
      __NAMESPACE__::Cell&           coarseGridCell,
      const tarch::la::Vector<DIMENSIONS,int>&                       fineGridPositionOfVertex
) {
  logTraceInWith6Arguments( "destroyHangingVertex(...)", fineGridVertex, fineGridX, fineGridH, coarseGridVerticesEnumerator.toString(), coarseGridCell, fineGridPositionOfVertex );
  // @todo Insert your code here
  logTraceOutWith1Argument( "destroyHangingVertex(...)", fineGridVertex );
}


void __THIS_QUALIFIED_TYPENAME__::createInnerVertex(
      __NAMESPACE__::Vertex&               fineGridVertex,
      const tarch::la::Vector<DIMENSIONS,double>&                          fineGridX,
      const tarch::la::Vector<DIMENSIONS,double>&                          fineGridH,
      __NAMESPACE__::Vertex * const        coarseGridVertices,
      const peano::grid::VertexEnumerator&                coarseGridVerticesEnumerator,
      __NAMESPACE__::Cell&                 coarseGridCell,
      const tarch::la::Vector<DIMENSIONS,int>&                             fineGridPositionOfVertex
) {
  logTraceInWith6Arguments( "createInnerVertex(...)", fineGridVertex, fineGridX, fineGridH, coarseGridVerticesEnumerator.toString(), coarseGridCell, fineGridPositionOfVertex );
  // @todo Insert your code here
  logTraceOutWith1Argument( "createInnerVertex(...)", fineGridVertex );
}


void __THIS_QUALIFIED_TYPENAME__::createBoundaryVertex(
      __NAMESPACE__::Vertex&               fineGridVertex,
      const tarch::la::Vector<DIMENSIONS,double>&                          fineGridX,
      const tarch::la::Vector<DIMENSIONS,double>&                          fineGridH,
      __NAMESPACE__::Vertex * const        coarseGridVertices,
      const peano::grid::VertexEnumerator&                coarseGridVerticesEnumerator,
      __NAMESPACE__::Cell&                 coarseGridCell,
      const tarch::la::Vector<DIMENSIONS,int>&                             fineGridPositionOfVertex
) {
  logTraceInWith6Arguments( "createBoundaryVertex(...)", fineGridVertex, fineGridX, fineGridH, coarseGridVerticesEnumerator.toString(), coarseGridCell, fineGridPositionOfVertex );
  // @todo Insert your code here
  logTraceOutWith1Argument( "createBoundaryVertex(...)", fineGridVertex );
}


void __THIS_QUALIFIED_TYPENAME__::destroyVertex(
      const __NAMESPACE__::Vertex&   fineGridVertex,
      const tarch::la::Vector<DIMENSIONS,double>&                    fineGridX,
      const tarch::la::Vector<DIMENSIONS,double>&                    fineGridH,
      __NAMESPACE__::Vertex * const  coarseGridVertices,
      const peano::grid::VertexEnumerator&          coarseGridVerticesEnumerator,
      __NAMESPACE__::Cell&           coarseGridCell,
      const tarch::la::Vector<DIMENSIONS,int>&                       fineGridPositionOfVertex
) {
  logTraceInWith6Arguments( "destroyVertex(...)", fineGridVertex, fineGridX, fineGridH, coarseGridVerticesEnumerator.toString(), coarseGridCell, fineGridPositionOfVertex );
  // @todo Insert your code here
  logTraceOutWith1Argument( "destroyVertex(...)", fineGridVertex );
}


void __THIS_QUALIFIED_TYPENAME__::createCell(
      __NAMESPACE__::Cell&                 fineGridCell,
      __NAMESPACE__::Vertex * const        fineGridVertices,
      const peano::grid::VertexEnumerator&                fineGridVerticesEnumerator,
      __NAMESPACE__::Vertex * const        coarseGridVertices,
      const peano::grid::VertexEnumerator&                coarseGridVerticesEnumerator,
      __NAMESPACE__::Cell&                 coarseGridCell,
      const tarch::la::Vector<DIMENSIONS,int>&                             fineGridPositionOfCell
) {
  logTraceInWith4Arguments( "createCell(...)", fineGridCell, fineGridVerticesEnumerator.toString(), coarseGridCell, fineGridPositionOfCell );
  // @todo Insert your code here
  logTraceOutWith1Argument( "createCell(...)", fineGridCell );
}


void __THIS_QUALIFIED_TYPENAME__::destroyCell(
      const __NAMESPACE__::Cell&           fineGridCell,
      __NAMESPACE__::Vertex * const        fineGridVertices,
      const peano::grid::VertexEnumerator&                fineGridVerticesEnumerator,
      __NAMESPACE__::Vertex * const        coarseGridVertices,
      const peano::grid::VertexEnumerator&                coarseGridVerticesEnumerator,
      __NAMESPACE__::Cell&                 coarseGridCell,
      const tarch::la::Vector<DIMENSIONS,int>&                             fineGridPositionOfCell
) {
  logTraceInWith4Arguments( "destroyCell(...)", fineGridCell, fineGridVerticesEnumerator.toString(), coarseGridCell, fineGridPositionOfCell );
  // @todo Insert your code here
  logTraceOutWith1Argument( "destroyCell(...)", fineGridCell );
}

#ifdef Parallel
void __THIS_QUALIFIED_TYPENAME__::mergeWithNeighbour(
  __NAMESPACE__::Vertex&  vertex,
  const __NAMESPACE__::Vertex&  neighbour,
  int                                           fromRank,
  const tarch::la::Vector<DIMENSIONS,double>&   fineGridX,
  const tarch::la::Vector<DIMENSIONS,double>&   fineGridH,
  int                                           level
) {
  logTraceInWith6Arguments( "mergeWithNeighbour(...)", vertex, neighbour, fromRank, fineGridX, fineGridH, level );
  // @todo Insert your code here
  logTraceOut( "mergeWithNeighbour(...)" );
}

void __THIS_QUALIFIED_TYPENAME__::prepareSendToNeighbour(
  __NAMESPACE__::Vertex&  vertex,
  int  toRank,
  int  level
) {
  logTraceInWith3Arguments( "prepareSendToNeighbour(...)", vertex, toRank, level );
  // @todo Insert your code here
  logTraceOut( "prepareSendToNeighbour(...)" );
}

void __THIS_QUALIFIED_TYPENAME__::prepareCopyToRemoteNode(
  __NAMESPACE__::Vertex&  localVertex,
  int  toRank
) {
  logTraceInWith2Arguments( "prepareCopyToRemoteNode(...)", localVertex, toRank );
  // @todo Insert your code here
  logTraceOut( "prepareCopyToRemoteNode(...)" );
}

void __THIS_QUALIFIED_TYPENAME__::prepareCopyToRemoteNode(
  __NAMESPACE__::Cell&  localCell,
  int  toRank
) {
  logTraceInWith2Arguments( "prepareCopyToRemoteNode(...)", localCell, toRank );
  // @todo Insert your code here
  logTraceOut( "prepareCopyToRemoteNode(...)" );
}

void __THIS_QUALIFIED_TYPENAME__::mergeWithRemoteDataDueToForkOrJoin(
  __NAMESPACE__::Vertex&  localVertex,
  const __NAMESPACE__::Vertex&  masterOrWorkerVertex,
  int                                       fromRank,
  const tarch::la::Vector<DIMENSIONS,double>&  x,
  const tarch::la::Vector<DIMENSIONS,double>&  h,
  int                                       level
) {
  logTraceInWith6Arguments( "mergeWithRemoteDataDueToForkOrJoin(...)", localVertex, masterOrWorkerVertex, fromRank, x, h, level );
  // @todo Insert your code here
  logTraceOut( "mergeWithRemoteDataDueToForkOrJoin(...)" );
}

void __THIS_QUALIFIED_TYPENAME__::mergeWithRemoteDataDueToForkOrJoin(
  __NAMESPACE__::Cell&  localCell,
  const __NAMESPACE__::Cell&  masterOrWorkerCell,
  int                                       fromRank,
  const tarch::la::Vector<DIMENSIONS,double>&  x,
  const tarch::la::Vector<DIMENSIONS,double>&  h,
  int                                       level
) {
  logTraceInWith3Arguments( "mergeWithRemoteDataDueToForkOrJoin(...)", localCell, masterOrWorkerCell, fromRank );
  // @todo Insert your code here
  logTraceOut( "mergeWithRemoteDataDueToForkOrJoin(...)" );
}

void __THIS_QUALIFIED_TYPENAME__::prepareSendToWorker(
  __NAMESPACE__::Cell&                 fineGridCell,
  __NAMESPACE__::Vertex * const        fineGridVertices,
  const peano::grid::VertexEnumerator&                fineGridVerticesEnumerator,
  __NAMESPACE__::Vertex * const        coarseGridVertices,
  const peano::grid::VertexEnumerator&                coarseGridVerticesEnumerator,
  __NAMESPACE__::Cell&                 coarseGridCell,
  const tarch::la::Vector<DIMENSIONS,int>&                             fineGridPositionOfCell,
  int                                                                  worker
) {
  logTraceIn( "prepareSendToWorker(...)" );
  // @todo Insert your code here
  logTraceOut( "prepareSendToWorker(...)" );
}

void __THIS_QUALIFIED_TYPENAME__::prepareSendToMaster(
  __NAMESPACE__::Cell&     localCell,
  __NAMESPACE__::Vertex *  vertices,
  const peano::grid::VertexEnumerator&  verticesEnumerator
) {
  logTraceInWith2Arguments( "prepareSendToMaster(...)", localCell, verticesEnumerator.toString() );
  // @todo Insert your code here
  logTraceOut( "prepareSendToMaster(...)" );
}


void __THIS_QUALIFIED_TYPENAME__::mergeWithMaster(
  const __NAMESPACE__::Cell&           workerGridCell,
  __NAMESPACE__::Vertex * const        workerGridVertices,
 const peano::grid::VertexEnumerator& workerEnumerator,
  __NAMESPACE__::Cell&                 fineGridCell,
  __NAMESPACE__::Vertex * const        fineGridVertices,
  const peano::grid::VertexEnumerator&                fineGridVerticesEnumerator,
  __NAMESPACE__::Vertex * const        coarseGridVertices,
  const peano::grid::VertexEnumerator&                coarseGridVerticesEnumerator,
  __NAMESPACE__::Cell&                 coarseGridCell,
  const tarch::la::Vector<DIMENSIONS,int>&                             fineGridPositionOfCell,
  int                                                                  worker,
  const __NAMESPACE__::State&          workerState,
  __NAMESPACE__::State&                masterState
) {
  logTraceIn( "mergeWithMaster(...)" );
  // @todo Insert your code here
  logTraceOut( "mergeWithMaster(...)" );
}


void __THIS_QUALIFIED_TYPENAME__::receiveDataFromMaster(
  __NAMESPACE__::Cell&                    receivedCell, 
  __NAMESPACE__::Vertex *                 receivedVertices,
  const peano::grid::VertexEnumerator&    verticesEnumerator
) {
  logTraceInWith2Arguments( "receiveDataFromMaster(...)", receivedCell.toString(), verticesEnumerator.toString() );
  // @todo Insert your code here
  logTraceOut( "receiveDataFromMaster(...)" );
}


void __THIS_QUALIFIED_TYPENAME__::mergeWithWorker(
  __NAMESPACE__::Cell&           localCell, 
  const __NAMESPACE__::Cell&     receivedMasterCell
) {
  logTraceInWith2Arguments( "mergeWithWorker(...)", localCell.toString(), receivedMasterCell.toString() );
  // @todo Insert your code here
  logTraceOutWith1Argument( "mergeWithWorker(...)", localCell.toString() );
}


void __THIS_QUALIFIED_TYPENAME__::mergeWithWorker(
  __NAMESPACE__::Vertex&        localVertex,
  const __NAMESPACE__::Vertex&  receivedMasterVertex
) {
  logTraceInWith2Arguments( "mergeWithWorker(...)", localVertex.toString(), receivedMasterVertex.toString() );
  // @todo Insert your code here
  logTraceOutWith1Argument( "mergeWithWorker(...)", localVertex.toString() );
}
#endif

void __THIS_QUALIFIED_TYPENAME__::touchVertexFirstTime(
      __NAMESPACE__::Vertex&               fineGridVertex,
      const tarch::la::Vector<DIMENSIONS,double>&                          fineGridX,
      const tarch::la::Vector<DIMENSIONS,double>&                          fineGridH,
      __NAMESPACE__::Vertex * const        coarseGridVertices,
      const peano::grid::VertexEnumerator&                coarseGridVerticesEnumerator,
      __NAMESPACE__::Cell&                 coarseGridCell,
      const tarch::la::Vector<DIMENSIONS,int>&                             fineGridPositionOfVertex
) {
  logTraceInWith6Arguments( "touchVertexFirstTime(...)", fineGridVertex, fineGridX, fineGridH, coarseGridVerticesEnumerator.toString(), coarseGridCell, fineGridPositionOfVertex );
  // @todo Insert your code here
  logTraceOutWith1Argument( "touchVertexFirstTime(...)", fineGridVertex );
}


void __THIS_QUALIFIED_TYPENAME__::touchVertexLastTime(
      __NAMESPACE__::Vertex&         fineGridVertex,
      const tarch::la::Vector<DIMENSIONS,double>&                    fineGridX,
      const tarch::la::Vector<DIMENSIONS,double>&                    fineGridH,
      __NAMESPACE__::Vertex * const  coarseGridVertices,
      const peano::grid::VertexEnumerator&          coarseGridVerticesEnumerator,
      __NAMESPACE__::Cell&           coarseGridCell,
      const tarch::la::Vector<DIMENSIONS,int>&                       fineGridPositionOfVertex
) {
  logTraceInWith6Arguments( "touchVertexLastTime(...)", fineGridVertex, fineGridX, fineGridH, coarseGridVerticesEnumerator.toString(), coarseGridCell, fineGridPositionOfVertex );
  // @todo Insert your code here
  logTraceOutWith1Argument( "touchVertexLastTime(...)", fineGridVertex );
}


void __THIS_QUALIFIED_TYPENAME__::enterCell(
      __NAMESPACE__::Cell&                 fineGridCell,
      __NAMESPACE__::Vertex * const        fineGridVertices,
      const peano::grid::VertexEnumerator&                fineGridVerticesEnumerator,
      __NAMESPACE__::Vertex * const        coarseGridVertices,
      const peano::grid::VertexEnumerator&                coarseGridVerticesEnumerator,
      __NAMESPACE__::Cell&                 coarseGridCell,
      const tarch::la::Vector<DIMENSIONS,int>&                             fineGridPositionOfCell
) {
  logTraceInWith4Arguments( "enterCell(...)", fineGridCell, fineGridVerticesEnumerator.toString(), coarseGridCell, fineGridPositionOfCell );
  // @todo Insert your code here
  logTraceOutWith1Argument( "enterCell(...)", fineGridCell );
}


void __THIS_QUALIFIED_TYPENAME__::leaveCell(
      __NAMESPACE__::Cell&           fineGridCell,
      __NAMESPACE__::Vertex * const  fineGridVertices,
      const peano::grid::VertexEnumerator&          fineGridVerticesEnumerator,
      __NAMESPACE__::Vertex * const  coarseGridVertices,
      const peano::grid::VertexEnumerator&          coarseGridVerticesEnumerator,
      __NAMESPACE__::Cell&           coarseGridCell,
      const tarch::la::Vector<DIMENSIONS,int>&                       fineGridPositionOfCell
) {
  logTraceInWith4Arguments( "leaveCell(...)", fineGridCell, fineGridVerticesEnumerator.toString(), coarseGridCell, fineGridPositionOfCell );
  // @todo Insert your code here
  logTraceOutWith1Argument( "leaveCell(...)", fineGridCell );
}


void __THIS_QUALIFIED_TYPENAME__::beginIteration(
  __NAMESPACE__::State&  solverState
) {
  logTraceInWith1Argument( "beginIteration(State)", solverState );
  // @todo Insert your code here
  logTraceOutWith1Argument( "beginIteration(State)", solverState);
}


void __THIS_QUALIFIED_TYPENAME__::endIteration(
  __NAMESPACE__::State&  solverState
) {
  logTraceInWith1Argument( "endIteration(State)", solverState );
  // @todo Insert your code here
  logTraceOutWith1Argument( "endIteration(State)", solverState);
}



void __THIS_QUALIFIED_TYPENAME__::descend(
  __NAMESPACE__::Cell * const          fineGridCells,
  __NAMESPACE__::Vertex * const        fineGridVertices,
  const peano::grid::VertexEnumerator&                fineGridVerticesEnumerator,
  __NAMESPACE__::Vertex * const        coarseGridVertices,
  const peano::grid::VertexEnumerator&                coarseGridVerticesEnumerator,
  __NAMESPACE__::Cell&                 coarseGridCell
) {
  logTraceInWith2Arguments( "descend(...)", coarseGridCell.toString(), coarseGridVerticesEnumerator.toString() );
  // @todo Insert your code here
  logTraceOut( "descend(...)" );
}


void __THIS_QUALIFIED_TYPENAME__::ascend(
  __NAMESPACE__::Cell * const    fineGridCells,
  __NAMESPACE__::Vertex * const  fineGridVertices,
  const peano::grid::VertexEnumerator&          fineGridVerticesEnumerator,
  __NAMESPACE__::Vertex * const  coarseGridVertices,
  const peano::grid::VertexEnumerator&          coarseGridVerticesEnumerator,
  __NAMESPACE__::Cell&           coarseGridCell
) {
  logTraceInWith2Arguments( "ascend(...)", coarseGridCell.toString(), coarseGridVerticesEnumerator.toString() );
  // @todo Insert your code here
  logTraceOut( "ascend(...)" );
}
