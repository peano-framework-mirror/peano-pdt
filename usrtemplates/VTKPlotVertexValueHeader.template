// This file is part of the Peano project. For conditions of distribution and 
// use, please see the copyright notice at www.peano-framework.org
#ifndef __INCLUDE_GUARD_PREFIX___ADAPTERS___THIS_TYPENAME___H_
#define __INCLUDE_GUARD_PREFIX___ADAPTERS___THIS_TYPENAME___H_


#include "tarch/la/Vector.h"
#include "tarch/la/VectorCompare.h"
#include "tarch/logging/Log.h"
#include "tarch/multicore/MulticoreDefinitions.h"
#include "tarch/plotter/griddata/unstructured/vtk/VTKTextFileWriter.h"

#include "peano/MappingSpecification.h"
#include "peano/grid/VertexEnumerator.h"

#include "__PROJECT_PATH__/Vertex.h"
#include "__PROJECT_PATH__/Cell.h"
#include "__PROJECT_PATH__/State.h"

#include <map>


__OPEN_NAMESPACE__
      namespace adapters {
        class __THIS_TYPENAME__;
      } 
__CLOSE_NAMESPACE__


/**
 * This is an adapter plotting a vtk grid file. Please set
 *
 * PARAM0   filename
 * PARAM1   getter for vertex value (without brackets)
 * PARAM2   Legend title
 *
 * @author Tobias Weinzierl
 * @version $Revision: 1.10 $
 */
class __NAMESPACE__::adapters::__THIS_TYPENAME__ {
  private:
    /**
     * One big map mapping vertices to indices. The procedure using this map is 
     * straightforward. Whenever we encounter a vertex, the object does a 
     * lookup whether this vertex already has been plotted. If not, it plots it 
     * and adds an entry.
     * 
     * @see plotVertex(const tarch::la::Vector<DIMENSIONS,double>&  x)
     */
    static std::map<tarch::la::Vector<DIMENSIONS,double> , int, tarch::la::VectorCompare<DIMENSIONS> >  _vertex2IndexMap;
    
    tarch::plotter::griddata::unstructured::vtk::VTKTextFileWriter*                 _vtkWriter;
    tarch::plotter::griddata::unstructured::UnstructuredGridWriter::VertexWriter*   _vertexWriter;
    tarch::plotter::griddata::unstructured::UnstructuredGridWriter::CellWriter*     _cellWriter;
    
    tarch::plotter::griddata::Writer::VertexDataWriter*                             _vertexValueWriter;
    
    static int _snapshotCounter;
    
    void plotVertex(
      const __NAMESPACE__::Vertex&                 fineGridVertex,
      const tarch::la::Vector<DIMENSIONS,double>&  fineGridX
    );
  public:
    static peano::MappingSpecification   touchVertexLastTimeSpecification();
    static peano::MappingSpecification   touchVertexFirstTimeSpecification();
    static peano::MappingSpecification   enterCellSpecification();
    static peano::MappingSpecification   leaveCellSpecification();
    static peano::MappingSpecification   ascendSpecification();
    static peano::MappingSpecification   descendSpecification();

    __THIS_TYPENAME__();

    #if defined(SharedMemoryParallelisation)
    __THIS_TYPENAME__(const __THIS_TYPENAME__& masterThread);
    #endif

    virtual ~__THIS_TYPENAME__();
  
    #if defined(SharedMemoryParallelisation)
    void mergeWithWorkerThread(const __THIS_TYPENAME__& workerThread);
    #endif

    void createInnerVertex(
      __NAMESPACE__::Vertex&               fineGridVertex,
      const tarch::la::Vector<DIMENSIONS,double>&                          fineGridX,
      const tarch::la::Vector<DIMENSIONS,double>&                          fineGridH,
      __NAMESPACE__::Vertex * const        coarseGridVertices,
      const peano::grid::VertexEnumerator&                coarseGridVerticesEnumerator,
      __NAMESPACE__::Cell&                 coarseGridCell,
      const tarch::la::Vector<DIMENSIONS,int>&                             fineGridPositionOfVertex
    );


    void createBoundaryVertex(
      __NAMESPACE__::Vertex&               fineGridVertex,
      const tarch::la::Vector<DIMENSIONS,double>&                          fineGridX,
      const tarch::la::Vector<DIMENSIONS,double>&                          fineGridH,
      __NAMESPACE__::Vertex * const        coarseGridVertices,
      const peano::grid::VertexEnumerator&                coarseGridVerticesEnumerator,
      __NAMESPACE__::Cell&                 coarseGridCell,
      const tarch::la::Vector<DIMENSIONS,int>&                             fineGridPositionOfVertex
    );


    void createHangingVertex(
      __NAMESPACE__::Vertex&               fineGridVertex,
      const tarch::la::Vector<DIMENSIONS,double>&                          fineGridX,
      const tarch::la::Vector<DIMENSIONS,double>&                          fineGridH,
      __NAMESPACE__::Vertex * const        coarseGridVertices,
      const peano::grid::VertexEnumerator&                coarseGridVerticesEnumerator,
      __NAMESPACE__::Cell&                 coarseGridCell,
      const tarch::la::Vector<DIMENSIONS,int>&                             fineGridPositionOfVertex
    );


    void destroyHangingVertex(
      const __NAMESPACE__::Vertex&   fineGridVertex,
      const tarch::la::Vector<DIMENSIONS,double>&                    fineGridX,
      const tarch::la::Vector<DIMENSIONS,double>&                    fineGridH,
      __NAMESPACE__::Vertex * const  coarseGridVertices,
      const peano::grid::VertexEnumerator&          coarseGridVerticesEnumerator,
      __NAMESPACE__::Cell&           coarseGridCell,
      const tarch::la::Vector<DIMENSIONS,int>&                       fineGridPositionOfVertex
    );


    void destroyVertex(
      const __NAMESPACE__::Vertex&   fineGridVertex,
      const tarch::la::Vector<DIMENSIONS,double>&                    fineGridX,
      const tarch::la::Vector<DIMENSIONS,double>&                    fineGridH,
      __NAMESPACE__::Vertex * const  coarseGridVertices,
      const peano::grid::VertexEnumerator&          coarseGridVerticesEnumerator,
      __NAMESPACE__::Cell&           coarseGridCell,
      const tarch::la::Vector<DIMENSIONS,int>&                       fineGridPositionOfVertex
    );


    void createCell(
      __NAMESPACE__::Cell&                 fineGridCell,
      __NAMESPACE__::Vertex * const         fineGridVertices,
      const peano::grid::VertexEnumerator&                fineGridVerticesEnumerator,
      __NAMESPACE__::Vertex * const        coarseGridVertices,
      const peano::grid::VertexEnumerator&                coarseGridVerticesEnumerator,
      __NAMESPACE__::Cell&                 coarseGridCell,
      const tarch::la::Vector<DIMENSIONS,int>&                             fineGridPositionOfCell
    );


    void destroyCell(
      const __NAMESPACE__::Cell&           fineGridCell,
      __NAMESPACE__::Vertex * const        fineGridVertices,
      const peano::grid::VertexEnumerator&                fineGridVerticesEnumerator,
      __NAMESPACE__::Vertex * const        coarseGridVertices,
      const peano::grid::VertexEnumerator&                coarseGridVerticesEnumerator,
      __NAMESPACE__::Cell&                 coarseGridCell,
      const tarch::la::Vector<DIMENSIONS,int>&                             fineGridPositionOfCell
    );
        
    #ifdef Parallel
    void mergeWithNeighbour(
      __NAMESPACE__::Vertex&  vertex,
      const __NAMESPACE__::Vertex&  neighbour,
      int                                           fromRank,
      const tarch::la::Vector<DIMENSIONS,double>&   fineGridX,
      const tarch::la::Vector<DIMENSIONS,double>&   fineGridH
    );

    void prepareSendToNeighbour(
      __NAMESPACE__::Vertex&  vertex,
      int  toRank
    );

    void prepareCopyToRemoteNode(
      __NAMESPACE__::Vertex&  localVertex,
      int  toRank
    );

    void prepareCopyToRemoteNode(
      __NAMESPACE__::Cell&  localCell,
      int  toRank
    );

    void mergeWithRemoteDataDueToForkOrJoin(
      __NAMESPACE__::Vertex&  localVertex,
      const __NAMESPACE__::Vertex&  masterOrWorkerVertex,
      int  fromRank
    );

    void mergeWithRemoteDataDueToForkOrJoin(
      __NAMESPACE__::Cell&  localCell,
      const __NAMESPACE__::Cell&  masterOrWorkerCell,
      int  fromRank
    );

    void prepareSendToWorker(
      __NAMESPACE__::Cell&                 fineGridCell,
      __NAMESPACE__::Vertex * const        fineGridVertices,
      const peano::grid::VertexEnumerator&                fineGridVerticesEnumerator,
      __NAMESPACE__::Vertex * const        coarseGridVertices,
      const peano::grid::VertexEnumerator&                coarseGridVerticesEnumerator,
      __NAMESPACE__::Cell&                 coarseGridCell,
      const tarch::la::Vector<DIMENSIONS,int>&                             fineGridPositionOfCell,
      int                                                                  worker
    );

    void prepareSendToMaster(
      __NAMESPACE__::Cell&     localCell,
      __NAMESPACE__::Vertex *  vertices,
      const peano::grid::VertexEnumerator&  verticesEnumerator
    );

    void mergeWithMaster(
      const __NAMESPACE__::Cell&           workerGridCell,
      __NAMESPACE__::Vertex                workerGridVertices[TWO_POWER_D],
      __NAMESPACE__::Cell&                 fineGridCell,
      __NAMESPACE__::Vertex * const        fineGridVertices,
      const peano::grid::VertexEnumerator&                fineGridVerticesEnumerator,
      __NAMESPACE__::Vertex * const        coarseGridVertices,
      const peano::grid::VertexEnumerator&                coarseGridVerticesEnumerator,
      __NAMESPACE__::Cell&                 coarseGridCell,
      const tarch::la::Vector<DIMENSIONS,int>&                             fineGridPositionOfCell,
      int                                                                  worker
    );


    void receiveDataFromMaster(
      __NAMESPACE__::Cell&                    receivedCell, 
      __NAMESPACE__::Vertex *                 receivedVertices,
      const peano::grid::VertexEnumerator&    verticesEnumerator
    );


    void mergeWithWorker(
      __NAMESPACE__::Cell&           localCell, 
      const __NAMESPACE__::Cell&     receivedMasterCell
    );


    void mergeWithWorker(
      __NAMESPACE__::Vertex&        localVertex,
      const __NAMESPACE__::Vertex&  receivedMasterVertex
    );
    #endif


    void touchVertexFirstTime(
      __NAMESPACE__::Vertex&               fineGridVertex,
      const tarch::la::Vector<DIMENSIONS,double>&                          fineGridX,
      const tarch::la::Vector<DIMENSIONS,double>&                          fineGridH,
      __NAMESPACE__::Vertex * const        coarseGridVertices,
      const peano::grid::VertexEnumerator&                coarseGridVerticesEnumerator,
      __NAMESPACE__::Cell&                 coarseGridCell,
      const tarch::la::Vector<DIMENSIONS,int>&                             fineGridPositionOfVertex
    );


    void touchVertexLastTime(
      __NAMESPACE__::Vertex&         fineGridVertex,
      const tarch::la::Vector<DIMENSIONS,double>&                    fineGridX,
      const tarch::la::Vector<DIMENSIONS,double>&                    fineGridH,
      __NAMESPACE__::Vertex * const  coarseGridVertices,
      const peano::grid::VertexEnumerator&          coarseGridVerticesEnumerator,
      __NAMESPACE__::Cell&           coarseGridCell,
      const tarch::la::Vector<DIMENSIONS,int>&                       fineGridPositionOfVertex
    );
    

    void enterCell(
      __NAMESPACE__::Cell&                 fineGridCell,
      __NAMESPACE__::Vertex * const        fineGridVertices,
      const peano::grid::VertexEnumerator&                fineGridVerticesEnumerator,
      __NAMESPACE__::Vertex * const        coarseGridVertices,
      const peano::grid::VertexEnumerator&                coarseGridVerticesEnumerator,
      __NAMESPACE__::Cell&                 coarseGridCell,
      const tarch::la::Vector<DIMENSIONS,int>&                             fineGridPositionOfCell
    );


    void leaveCell(
      __NAMESPACE__::Cell&                          fineGridCell,
      __NAMESPACE__::Vertex * const                 fineGridVertices,
      const peano::grid::VertexEnumerator&          fineGridVerticesEnumerator,
      __NAMESPACE__::Vertex * const                 coarseGridVertices,
      const peano::grid::VertexEnumerator&          coarseGridVerticesEnumerator,
      __NAMESPACE__::Cell&                          coarseGridCell,
      const tarch::la::Vector<DIMENSIONS,int>&      fineGridPositionOfCell
    );


    void beginIteration(
      __NAMESPACE__::State&  solverState
    );


    void endIteration(
      __NAMESPACE__::State&  solverState
    );

    void descend(
      __NAMESPACE__::Cell * const          fineGridCells,
      __NAMESPACE__::Vertex * const        fineGridVertices,
      const peano::grid::VertexEnumerator&                fineGridVerticesEnumerator,
      __NAMESPACE__::Vertex * const        coarseGridVertices,
      const peano::grid::VertexEnumerator&                coarseGridVerticesEnumerator,
      __NAMESPACE__::Cell&                 coarseGridCell
    );


    void ascend(
      __NAMESPACE__::Cell * const    fineGridCells,
      __NAMESPACE__::Vertex * const  fineGridVertices,
      const peano::grid::VertexEnumerator&          fineGridVerticesEnumerator,
      __NAMESPACE__::Vertex * const  coarseGridVertices,
      const peano::grid::VertexEnumerator&          coarseGridVerticesEnumerator,
      __NAMESPACE__::Cell&           coarseGridCell
    );    
};


#endif
