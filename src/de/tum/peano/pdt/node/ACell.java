/* This file was generated by SableCC (http://www.sablecc.org/). */

package de.tum.peano.pdt.node;

import de.tum.peano.pdt.analysis.*;

@SuppressWarnings("nls")
public final class ACell extends PCell
{
    private TIdentifier _name_;
    private TFilename _filename_;

    public ACell()
    {
        // Constructor
    }

    public ACell(
        @SuppressWarnings("hiding") TIdentifier _name_,
        @SuppressWarnings("hiding") TFilename _filename_)
    {
        // Constructor
        setName(_name_);

        setFilename(_filename_);

    }

    @Override
    public Object clone()
    {
        return new ACell(
            cloneNode(this._name_),
            cloneNode(this._filename_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACell(this);
    }

    public TIdentifier getName()
    {
        return this._name_;
    }

    public void setName(TIdentifier node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public TFilename getFilename()
    {
        return this._filename_;
    }

    public void setFilename(TFilename node)
    {
        if(this._filename_ != null)
        {
            this._filename_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._filename_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._name_)
            + toString(this._filename_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._filename_ == child)
        {
            this._filename_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._name_ == oldChild)
        {
            setName((TIdentifier) newChild);
            return;
        }

        if(this._filename_ == oldChild)
        {
            setFilename((TFilename) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
