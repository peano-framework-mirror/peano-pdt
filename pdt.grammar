// This file is part of the Peano project. For conditions of distribution and
// use, please see the copyright notice at www.peano-framework.org.
Package org.peano.pdt;

Helpers
	all 	= 	[ 0 .. 127 ];
	dot			=	'.';
	digit 	= 	[ '0' .. '9' ];
	five    = '5';
	nondigit 	= 	[ '_' + [ [ 'a' .. 'z' ] + [ 'A' .. 'Z' ] ] ];
	nonzero_digit 	= 	[ '1' .. '9' ];
	
	filename_element =  digit | nondigit | '-' | '_' | dot;

  namespace_element =  digit | nondigit | '_' | dot;

	not_star 	= 	[ all - '*' ];
	not_star_not_slash 	= 	[ not_star - '/' ];

	cr 	= 	13;   
	lf 	= 	10;
	tab 	= 	9;  
	line_terminator = lf | cr | cr lf; 
	not_line_terminator = [[all - cr] - lf];
	
 
Tokens 
  token_vertex                = 'vertex:';
  token_cell                  = 'cell:';
  token_state                 = 'state:';
  token_component             = 'component:';
  token_namespace             = 'namespace:';
  
  token_read                  = 'read';
  token_write                 = 'write';
  
  token_scalar                = 'scalar:';
  token_vector_d              = 'vector:';
  token_vector_two_pow_d      = 'vector2PowD:';
  token_stencil               = 'stencil:';
  	
  token_name                  = 'name:';
  token_dastgen_file          = 'dastgen-file:';
  
  token_event_mapping         = 'event-mapping:';
  
  token_adapter                         = 'adapter:';
  token_merge_with_user_defined_adapter = 'merge-with-user-defined-mapping:';
  token_merge_with_predefined_adapter   = 'merge-with-predefined-mapping:';
	
	blank                       = ( cr | lf | tab | ' ' ) +;
	identifier 	                = nondigit ( digit | nondigit ) *;
  filename                    = '/' ? (filename_element + '/') * filename_element +;
  namespace                   = '::' ? (namespace_element + '::') * namespace_element +;
   	
  traditional_comment = '/*' not_star+ '*'+ (not_star_not_slash not_star* '*'+)* '/';
  documentation_comment =    '/**' '*'* (not_star_not_slash not_star* '*'+)* '/';
	end_of_line_comment = '//' not_line_terminator * line_terminator;

Ignored Tokens
  
  traditional_comment,
  documentation_comment,
  end_of_line_comment,
  blank;

Productions
  
  description {->description} = 
    token_component [name]:identifier token_namespace namespace vertex cell state event_mapping_list? adapter_list?
      { -> New description( name,namespace,vertex, cell, state, [event_mapping_list.event_mapping], [adapter_list.adapter] ) };

  vertex {->vertex} = 
    token_vertex token_dastgen_file filename operation_list? 
      { -> New vertex( filename, [operation_list.operation]) };

  state {->state} = 
    token_state token_dastgen_file filename
      { -> New state( filename) };

  cell {->cell} = 
    token_cell token_dastgen_file filename
      { -> New cell( filename) };
  
  operation_list { -> operation* } =
      {single_read_scalar} token_read token_scalar identifier
        { -> [New operation.read_scalar(identifier) ] }
    | {list_read_scalar}   token_read token_scalar identifier operation_list
        { -> [New operation.read_scalar(identifier),operation_list.operation] }
    | {single_read_vector} token_read token_vector_d identifier
        { -> [New operation.read_vector(identifier) ] }
    | {list_read_vector}   token_read token_vector_d identifier operation_list
        { -> [New operation.read_vector(identifier),operation_list.operation] }
    | {single_read_token_vector_two_pow_d} token_read token_vector_two_pow_d identifier
        { -> [New operation.read_vector_two_pow_d(identifier) ] }
    | {list_read_token_vector_two_pow_d}   token_read token_vector_two_pow_d identifier operation_list
        { -> [New operation.read_vector_two_pow_d(identifier),operation_list.operation] }
    | {single_read_stencil} token_read token_stencil identifier
        { -> [New operation.read_stencil(identifier) ] }
    | {list_read_stencil}   token_read token_stencil identifier operation_list
        { -> [New operation.read_stencil(identifier),operation_list.operation] }
    | {single_write_scalar} token_write token_scalar identifier
        { -> [New operation.write_scalar(identifier) ] }
    | {list_write_scalar}   token_write token_scalar identifier operation_list
        { -> [New operation.write_scalar(identifier),operation_list.operation] }
    | {single_write_vector_two_pow_d} token_write token_vector_two_pow_d identifier
        { -> [New operation.write_vector_two_pow_d(identifier) ] }
    | {list_write_vector_two_pow_d}   token_write token_vector_two_pow_d identifier operation_list
        { -> [New operation.write_vector_two_pow_d(identifier),operation_list.operation] }
    | {single_write_vector} token_write token_vector_d identifier
        { -> [New operation.write_vector(identifier) ] }
    | {list_write_vector}   token_write token_vector_d identifier operation_list
        { -> [New operation.write_vector(identifier),operation_list.operation] }
    | {single_write_stencil} token_write token_stencil identifier
        { -> [New operation.write_stencil(identifier) ] }
    | {list_write_stencil}   token_write token_stencil identifier operation_list
        { -> [New operation.write_stencil(identifier),operation_list.operation] };
  
  event_mapping_list {->event_mapping*} =
      {single}  token_event_mapping token_name identifier 
        { -> [New event_mapping(identifier)] }
    | {list}    token_event_mapping token_name identifier event_mapping_list
        { -> [New event_mapping(identifier),event_mapping_list.event_mapping] };        
  
  adapter_list {->adapter*} =
      {single}  token_adapter token_name identifier merge_with_user_defined_adapter_list? merge_with_predefined_adapter_list?
        { -> [New adapter(identifier,[merge_with_user_defined_adapter_list.identifier],[merge_with_predefined_adapter_list.identifier])] }
    | {list}    token_adapter token_name identifier merge_with_user_defined_adapter_list? merge_with_predefined_adapter_list? adapter_list
        { -> [New adapter(identifier,[merge_with_user_defined_adapter_list.identifier],[merge_with_predefined_adapter_list.identifier]),adapter_list.adapter] };        
 
  merge_with_user_defined_adapter_list {->identifier*} = 
      {single}  token_merge_with_user_defined_adapter identifier
        { -> [identifier] }
    | {list}    token_merge_with_user_defined_adapter identifier merge_with_user_defined_adapter_list
        { -> [identifier,merge_with_user_defined_adapter_list.identifier] };        
  
  merge_with_predefined_adapter_list {->identifier*} =
      {single}  token_merge_with_predefined_adapter identifier
        { -> [identifier] }
    | {list}    token_merge_with_predefined_adapter identifier merge_with_predefined_adapter_list
        { -> [identifier,merge_with_predefined_adapter_list.identifier] };        
  
Abstract Syntax Tree
 
  description = [name]:identifier namespace vertex cell state event_mapping* adapter*;
  
  repository = [name]:identifier;
  
  vertex = [filename]:filename operation*;

  operation = 
      {read_scalar}       [name]:identifier
    | {read_vector}       [name]:identifier
    | {read_vector_two_pow_d}  [name]:identifier
    | {read_stencil}      [name]:identifier
    | {write_scalar}      [name]:identifier
    | {write_vector}      [name]:identifier
    | {write_vector_two_pow_d} [name]:identifier
    | {write_stencil}     [name]:identifier;
    
  cell = [filename]:filename;
 
  state = [filename]:filename;
  
  event_mapping = [name]:identifier;
  
  adapter = [name]:identifier [user_defined]:identifier* [predefined_defined]:identifier*;
  