/* This file was generated by SableCC (http://www.sablecc.org/). */

package de.tum.peano.pdt.parser;

import de.tum.peano.pdt.lexer.*;
import de.tum.peano.pdt.node.*;
import de.tum.peano.pdt.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AAdescription1Description */
		    {
			ArrayList list = new0();
			push(goTo(0), list);
		    }
		    break;
                    case 1: /* reduce AAdescription2Description */
		    {
			ArrayList list = new1();
			push(goTo(0), list);
		    }
		    break;
                    case 2: /* reduce AAdescription3Description */
		    {
			ArrayList list = new2();
			push(goTo(0), list);
		    }
		    break;
                    case 3: /* reduce AAdescription4Description */
		    {
			ArrayList list = new3();
			push(goTo(0), list);
		    }
		    break;
                    case 4: /* reduce ARepository */
		    {
			ArrayList list = new4();
			push(goTo(1), list);
		    }
		    break;
                    case 5: /* reduce AAvertex1Vertex */
		    {
			ArrayList list = new5();
			push(goTo(2), list);
		    }
		    break;
                    case 6: /* reduce AAvertex2Vertex */
		    {
			ArrayList list = new6();
			push(goTo(2), list);
		    }
		    break;
                    case 7: /* reduce AState */
		    {
			ArrayList list = new7();
			push(goTo(3), list);
		    }
		    break;
                    case 8: /* reduce ACell */
		    {
			ArrayList list = new8();
			push(goTo(4), list);
		    }
		    break;
                    case 9: /* reduce ASingleReadScalarOperationList */
		    {
			ArrayList list = new9();
			push(goTo(5), list);
		    }
		    break;
                    case 10: /* reduce AListReadScalarOperationList */
		    {
			ArrayList list = new10();
			push(goTo(5), list);
		    }
		    break;
                    case 11: /* reduce ASingleReadVectorOperationList */
		    {
			ArrayList list = new11();
			push(goTo(5), list);
		    }
		    break;
                    case 12: /* reduce AListReadVectorOperationList */
		    {
			ArrayList list = new12();
			push(goTo(5), list);
		    }
		    break;
                    case 13: /* reduce ASingleReadTokenVectorTwoPowDOperationList */
		    {
			ArrayList list = new13();
			push(goTo(5), list);
		    }
		    break;
                    case 14: /* reduce AListReadTokenVectorTwoPowDOperationList */
		    {
			ArrayList list = new14();
			push(goTo(5), list);
		    }
		    break;
                    case 15: /* reduce ASingleReadStencilOperationList */
		    {
			ArrayList list = new15();
			push(goTo(5), list);
		    }
		    break;
                    case 16: /* reduce AListReadStencilOperationList */
		    {
			ArrayList list = new16();
			push(goTo(5), list);
		    }
		    break;
                    case 17: /* reduce ASingleWriteScalarOperationList */
		    {
			ArrayList list = new17();
			push(goTo(5), list);
		    }
		    break;
                    case 18: /* reduce AListWriteScalarOperationList */
		    {
			ArrayList list = new18();
			push(goTo(5), list);
		    }
		    break;
                    case 19: /* reduce ASingleWriteVectorTwoPowDOperationList */
		    {
			ArrayList list = new19();
			push(goTo(5), list);
		    }
		    break;
                    case 20: /* reduce AListWriteVectorTwoPowDOperationList */
		    {
			ArrayList list = new20();
			push(goTo(5), list);
		    }
		    break;
                    case 21: /* reduce ASingleWriteVectorOperationList */
		    {
			ArrayList list = new21();
			push(goTo(5), list);
		    }
		    break;
                    case 22: /* reduce AListWriteVectorOperationList */
		    {
			ArrayList list = new22();
			push(goTo(5), list);
		    }
		    break;
                    case 23: /* reduce ASingleWriteStencilOperationList */
		    {
			ArrayList list = new23();
			push(goTo(5), list);
		    }
		    break;
                    case 24: /* reduce AListWriteStencilOperationList */
		    {
			ArrayList list = new24();
			push(goTo(5), list);
		    }
		    break;
                    case 25: /* reduce ASingleEventMappingList */
		    {
			ArrayList list = new25();
			push(goTo(6), list);
		    }
		    break;
                    case 26: /* reduce AListEventMappingList */
		    {
			ArrayList list = new26();
			push(goTo(6), list);
		    }
		    break;
                    case 27: /* reduce AAsingleadapterlist1AdapterList */
		    {
			ArrayList list = new27();
			push(goTo(7), list);
		    }
		    break;
                    case 28: /* reduce AAsingleadapterlist2AdapterList */
		    {
			ArrayList list = new28();
			push(goTo(7), list);
		    }
		    break;
                    case 29: /* reduce AAsingleadapterlist3AdapterList */
		    {
			ArrayList list = new29();
			push(goTo(7), list);
		    }
		    break;
                    case 30: /* reduce AAsingleadapterlist4AdapterList */
		    {
			ArrayList list = new30();
			push(goTo(7), list);
		    }
		    break;
                    case 31: /* reduce AAlistadapterlist1AdapterList */
		    {
			ArrayList list = new31();
			push(goTo(7), list);
		    }
		    break;
                    case 32: /* reduce AAlistadapterlist2AdapterList */
		    {
			ArrayList list = new32();
			push(goTo(7), list);
		    }
		    break;
                    case 33: /* reduce AAlistadapterlist3AdapterList */
		    {
			ArrayList list = new33();
			push(goTo(7), list);
		    }
		    break;
                    case 34: /* reduce AAlistadapterlist4AdapterList */
		    {
			ArrayList list = new34();
			push(goTo(7), list);
		    }
		    break;
                    case 35: /* reduce ASingleMergeWithUserDefinedAdapterList */
		    {
			ArrayList list = new35();
			push(goTo(8), list);
		    }
		    break;
                    case 36: /* reduce AListMergeWithUserDefinedAdapterList */
		    {
			ArrayList list = new36();
			push(goTo(8), list);
		    }
		    break;
                    case 37: /* reduce ASingleMergeWithPredefinedAdapterList */
		    {
			ArrayList list = new37();
			push(goTo(9), list);
		    }
		    break;
                    case 38: /* reduce AListMergeWithPredefinedAdapterList */
		    {
			ArrayList list = new38();
			push(goTo(9), list);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PDescription node1 = (PDescription) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AAdescription1Description */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDescription pdescriptionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TIdentifier tidentifierNode3;
        PRepository prepositoryNode4;
        TNamespace tnamespaceNode5;
        PVertex pvertexNode6;
        PCell pcellNode7;
        PState pstateNode8;
        LinkedList listNode9 = new LinkedList();
        LinkedList listNode10 = new LinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList4.get(0);
        prepositoryNode4 = (PRepository)nodeArrayList5.get(0);
        tnamespaceNode5 = (TNamespace)nodeArrayList7.get(0);
        pvertexNode6 = (PVertex)nodeArrayList8.get(0);
        pcellNode7 = (PCell)nodeArrayList9.get(0);
        pstateNode8 = (PState)nodeArrayList10.get(0);
        {
            // Block
        }
        {
            // Block
        }

        pdescriptionNode1 = new ADescription(tidentifierNode2, tidentifierNode3, prepositoryNode4, tnamespaceNode5, pvertexNode6, pcellNode7, pstateNode8, listNode9, listNode10);
        }
	nodeList.add(pdescriptionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AAdescription2Description */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDescription pdescriptionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TIdentifier tidentifierNode3;
        PRepository prepositoryNode4;
        TNamespace tnamespaceNode5;
        PVertex pvertexNode6;
        PCell pcellNode7;
        PState pstateNode8;
        LinkedList listNode10 = new LinkedList();
        LinkedList listNode11 = new LinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList4.get(0);
        prepositoryNode4 = (PRepository)nodeArrayList5.get(0);
        tnamespaceNode5 = (TNamespace)nodeArrayList7.get(0);
        pvertexNode6 = (PVertex)nodeArrayList8.get(0);
        pcellNode7 = (PCell)nodeArrayList9.get(0);
        pstateNode8 = (PState)nodeArrayList10.get(0);
        {
            // Block
        LinkedList listNode9 = new LinkedList();
        listNode9 = (LinkedList)nodeArrayList11.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        {
            // Block
        }

        pdescriptionNode1 = new ADescription(tidentifierNode2, tidentifierNode3, prepositoryNode4, tnamespaceNode5, pvertexNode6, pcellNode7, pstateNode8, listNode10, listNode11);
        }
	nodeList.add(pdescriptionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AAdescription3Description */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDescription pdescriptionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TIdentifier tidentifierNode3;
        PRepository prepositoryNode4;
        TNamespace tnamespaceNode5;
        PVertex pvertexNode6;
        PCell pcellNode7;
        PState pstateNode8;
        LinkedList listNode9 = new LinkedList();
        LinkedList listNode11 = new LinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList4.get(0);
        prepositoryNode4 = (PRepository)nodeArrayList5.get(0);
        tnamespaceNode5 = (TNamespace)nodeArrayList7.get(0);
        pvertexNode6 = (PVertex)nodeArrayList8.get(0);
        pcellNode7 = (PCell)nodeArrayList9.get(0);
        pstateNode8 = (PState)nodeArrayList10.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList listNode10 = new LinkedList();
        listNode10 = (LinkedList)nodeArrayList11.get(0);
	if(listNode10 != null)
	{
	  listNode11.addAll(listNode10);
	}
        }

        pdescriptionNode1 = new ADescription(tidentifierNode2, tidentifierNode3, prepositoryNode4, tnamespaceNode5, pvertexNode6, pcellNode7, pstateNode8, listNode9, listNode11);
        }
	nodeList.add(pdescriptionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AAdescription4Description */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDescription pdescriptionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TIdentifier tidentifierNode3;
        PRepository prepositoryNode4;
        TNamespace tnamespaceNode5;
        PVertex pvertexNode6;
        PCell pcellNode7;
        PState pstateNode8;
        LinkedList listNode10 = new LinkedList();
        LinkedList listNode12 = new LinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList4.get(0);
        prepositoryNode4 = (PRepository)nodeArrayList5.get(0);
        tnamespaceNode5 = (TNamespace)nodeArrayList7.get(0);
        pvertexNode6 = (PVertex)nodeArrayList8.get(0);
        pcellNode7 = (PCell)nodeArrayList9.get(0);
        pstateNode8 = (PState)nodeArrayList10.get(0);
        {
            // Block
        LinkedList listNode9 = new LinkedList();
        listNode9 = (LinkedList)nodeArrayList11.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        {
            // Block
        LinkedList listNode11 = new LinkedList();
        listNode11 = (LinkedList)nodeArrayList12.get(0);
	if(listNode11 != null)
	{
	  listNode12.addAll(listNode11);
	}
        }

        pdescriptionNode1 = new ADescription(tidentifierNode2, tidentifierNode3, prepositoryNode4, tnamespaceNode5, pvertexNode6, pcellNode7, pstateNode8, listNode10, listNode12);
        }
	nodeList.add(pdescriptionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce ARepository */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRepository prepositoryNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);

        prepositoryNode1 = new ARepository(tidentifierNode2);
        }
	nodeList.add(prepositoryNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AAvertex1Vertex */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVertex pvertexNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TFilename tfilenameNode3;
        LinkedList listNode4 = new LinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);
        tfilenameNode3 = (TFilename)nodeArrayList5.get(0);
        {
            // Block
        }

        pvertexNode1 = new AVertex(tidentifierNode2, tfilenameNode3, listNode4);
        }
	nodeList.add(pvertexNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AAvertex2Vertex */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVertex pvertexNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TFilename tfilenameNode3;
        LinkedList listNode5 = new LinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);
        tfilenameNode3 = (TFilename)nodeArrayList5.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList6.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pvertexNode1 = new AVertex(tidentifierNode2, tfilenameNode3, listNode5);
        }
	nodeList.add(pvertexNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AState */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PState pstateNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TFilename tfilenameNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);
        tfilenameNode3 = (TFilename)nodeArrayList5.get(0);

        pstateNode1 = new AState(tidentifierNode2, tfilenameNode3);
        }
	nodeList.add(pstateNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce ACell */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCell pcellNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TFilename tfilenameNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);
        tfilenameNode3 = (TFilename)nodeArrayList5.get(0);

        pcellNode1 = new ACell(tidentifierNode2, tfilenameNode3);
        }
	nodeList.add(pcellNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce ASingleReadScalarOperationList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        POperation poperationNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);

        poperationNode1 = new AReadScalarOperation(tidentifierNode2);
        }
	if(poperationNode1 != null)
	{
	  listNode3.add(poperationNode1);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AListReadScalarOperationList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode4 = new LinkedList();
        {
            // Block
        POperation poperationNode1;
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);

        poperationNode1 = new AReadScalarOperation(tidentifierNode2);
        }
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(poperationNode1 != null)
	{
	  listNode4.add(poperationNode1);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
	nodeList.add(listNode4);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce ASingleReadVectorOperationList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        POperation poperationNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);

        poperationNode1 = new AReadVectorOperation(tidentifierNode2);
        }
	if(poperationNode1 != null)
	{
	  listNode3.add(poperationNode1);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AListReadVectorOperationList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode4 = new LinkedList();
        {
            // Block
        POperation poperationNode1;
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);

        poperationNode1 = new AReadVectorOperation(tidentifierNode2);
        }
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(poperationNode1 != null)
	{
	  listNode4.add(poperationNode1);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
	nodeList.add(listNode4);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce ASingleReadTokenVectorTwoPowDOperationList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        POperation poperationNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);

        poperationNode1 = new AReadVectorTwoPowDOperation(tidentifierNode2);
        }
	if(poperationNode1 != null)
	{
	  listNode3.add(poperationNode1);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AListReadTokenVectorTwoPowDOperationList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode4 = new LinkedList();
        {
            // Block
        POperation poperationNode1;
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);

        poperationNode1 = new AReadVectorTwoPowDOperation(tidentifierNode2);
        }
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(poperationNode1 != null)
	{
	  listNode4.add(poperationNode1);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
	nodeList.add(listNode4);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce ASingleReadStencilOperationList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        POperation poperationNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);

        poperationNode1 = new AReadStencilOperation(tidentifierNode2);
        }
	if(poperationNode1 != null)
	{
	  listNode3.add(poperationNode1);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce AListReadStencilOperationList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode4 = new LinkedList();
        {
            // Block
        POperation poperationNode1;
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);

        poperationNode1 = new AReadStencilOperation(tidentifierNode2);
        }
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(poperationNode1 != null)
	{
	  listNode4.add(poperationNode1);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
	nodeList.add(listNode4);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce ASingleWriteScalarOperationList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        POperation poperationNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);

        poperationNode1 = new AWriteScalarOperation(tidentifierNode2);
        }
	if(poperationNode1 != null)
	{
	  listNode3.add(poperationNode1);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce AListWriteScalarOperationList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode4 = new LinkedList();
        {
            // Block
        POperation poperationNode1;
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);

        poperationNode1 = new AWriteScalarOperation(tidentifierNode2);
        }
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(poperationNode1 != null)
	{
	  listNode4.add(poperationNode1);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
	nodeList.add(listNode4);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce ASingleWriteVectorTwoPowDOperationList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        POperation poperationNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);

        poperationNode1 = new AWriteVectorTwoPowDOperation(tidentifierNode2);
        }
	if(poperationNode1 != null)
	{
	  listNode3.add(poperationNode1);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce AListWriteVectorTwoPowDOperationList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode4 = new LinkedList();
        {
            // Block
        POperation poperationNode1;
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);

        poperationNode1 = new AWriteVectorTwoPowDOperation(tidentifierNode2);
        }
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(poperationNode1 != null)
	{
	  listNode4.add(poperationNode1);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
	nodeList.add(listNode4);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce ASingleWriteVectorOperationList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        POperation poperationNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);

        poperationNode1 = new AWriteVectorOperation(tidentifierNode2);
        }
	if(poperationNode1 != null)
	{
	  listNode3.add(poperationNode1);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce AListWriteVectorOperationList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode4 = new LinkedList();
        {
            // Block
        POperation poperationNode1;
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);

        poperationNode1 = new AWriteVectorOperation(tidentifierNode2);
        }
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(poperationNode1 != null)
	{
	  listNode4.add(poperationNode1);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
	nodeList.add(listNode4);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce ASingleWriteStencilOperationList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        POperation poperationNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);

        poperationNode1 = new AWriteStencilOperation(tidentifierNode2);
        }
	if(poperationNode1 != null)
	{
	  listNode3.add(poperationNode1);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce AListWriteStencilOperationList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode4 = new LinkedList();
        {
            // Block
        POperation poperationNode1;
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);

        poperationNode1 = new AWriteStencilOperation(tidentifierNode2);
        }
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(poperationNode1 != null)
	{
	  listNode4.add(poperationNode1);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
	nodeList.add(listNode4);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce ASingleEventMappingList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PEventMapping peventmappingNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);

        peventmappingNode1 = new AEventMapping(tidentifierNode2);
        }
	if(peventmappingNode1 != null)
	{
	  listNode3.add(peventmappingNode1);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AListEventMappingList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode4 = new LinkedList();
        {
            // Block
        PEventMapping peventmappingNode1;
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);

        peventmappingNode1 = new AEventMapping(tidentifierNode2);
        }
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(peventmappingNode1 != null)
	{
	  listNode4.add(peventmappingNode1);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
	nodeList.add(listNode4);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce AAsingleadapterlist1AdapterList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode5 = new LinkedList();
        {
            // Block
        PAdapter padapterNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList listNode3 = new LinkedList();
        LinkedList listNode4 = new LinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        }

        padapterNode1 = new AAdapter(tidentifierNode2, listNode3, listNode4);
        }
	if(padapterNode1 != null)
	{
	  listNode5.add(padapterNode1);
	}
        }
	nodeList.add(listNode5);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce AAsingleadapterlist2AdapterList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode6 = new LinkedList();
        {
            // Block
        PAdapter padapterNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList listNode4 = new LinkedList();
        LinkedList listNode5 = new LinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        }

        padapterNode1 = new AAdapter(tidentifierNode2, listNode4, listNode5);
        }
	if(padapterNode1 != null)
	{
	  listNode6.add(padapterNode1);
	}
        }
	nodeList.add(listNode6);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce AAsingleadapterlist3AdapterList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode6 = new LinkedList();
        {
            // Block
        PAdapter padapterNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList listNode3 = new LinkedList();
        LinkedList listNode5 = new LinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        padapterNode1 = new AAdapter(tidentifierNode2, listNode3, listNode5);
        }
	if(padapterNode1 != null)
	{
	  listNode6.add(padapterNode1);
	}
        }
	nodeList.add(listNode6);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce AAsingleadapterlist4AdapterList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode7 = new LinkedList();
        {
            // Block
        PAdapter padapterNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList listNode4 = new LinkedList();
        LinkedList listNode6 = new LinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList5.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        padapterNode1 = new AAdapter(tidentifierNode2, listNode4, listNode6);
        }
	if(padapterNode1 != null)
	{
	  listNode7.add(padapterNode1);
	}
        }
	nodeList.add(listNode7);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce AAlistadapterlist1AdapterList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode6 = new LinkedList();
        {
            // Block
        PAdapter padapterNode1;
        LinkedList listNode5 = new LinkedList();
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList listNode3 = new LinkedList();
        LinkedList listNode4 = new LinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        }

        padapterNode1 = new AAdapter(tidentifierNode2, listNode3, listNode4);
        }
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(padapterNode1 != null)
	{
	  listNode6.add(padapterNode1);
	}
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
	nodeList.add(listNode6);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce AAlistadapterlist2AdapterList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode7 = new LinkedList();
        {
            // Block
        PAdapter padapterNode1;
        LinkedList listNode6 = new LinkedList();
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList listNode4 = new LinkedList();
        LinkedList listNode5 = new LinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        }

        padapterNode1 = new AAdapter(tidentifierNode2, listNode4, listNode5);
        }
        listNode6 = (LinkedList)nodeArrayList5.get(0);
	if(padapterNode1 != null)
	{
	  listNode7.add(padapterNode1);
	}
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
	nodeList.add(listNode7);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce AAlistadapterlist3AdapterList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode7 = new LinkedList();
        {
            // Block
        PAdapter padapterNode1;
        LinkedList listNode6 = new LinkedList();
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList listNode3 = new LinkedList();
        LinkedList listNode5 = new LinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        padapterNode1 = new AAdapter(tidentifierNode2, listNode3, listNode5);
        }
        listNode6 = (LinkedList)nodeArrayList5.get(0);
	if(padapterNode1 != null)
	{
	  listNode7.add(padapterNode1);
	}
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
	nodeList.add(listNode7);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce AAlistadapterlist4AdapterList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode8 = new LinkedList();
        {
            // Block
        PAdapter padapterNode1;
        LinkedList listNode7 = new LinkedList();
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList listNode4 = new LinkedList();
        LinkedList listNode6 = new LinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList5.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        padapterNode1 = new AAdapter(tidentifierNode2, listNode4, listNode6);
        }
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(padapterNode1 != null)
	{
	  listNode8.add(padapterNode1);
	}
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
	nodeList.add(listNode8);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce ASingleMergeWithUserDefinedAdapterList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        TIdentifier tidentifierNode1;
        tidentifierNode1 = (TIdentifier)nodeArrayList2.get(0);
	if(tidentifierNode1 != null)
	{
	  listNode2.add(tidentifierNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce AListMergeWithUserDefinedAdapterList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        TIdentifier tidentifierNode1;
        LinkedList listNode2 = new LinkedList();
        tidentifierNode1 = (TIdentifier)nodeArrayList2.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(tidentifierNode1 != null)
	{
	  listNode3.add(tidentifierNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce ASingleMergeWithPredefinedAdapterList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        TIdentifier tidentifierNode1;
        tidentifierNode1 = (TIdentifier)nodeArrayList2.get(0);
	if(tidentifierNode1 != null)
	{
	  listNode2.add(tidentifierNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce AListMergeWithPredefinedAdapterList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        TIdentifier tidentifierNode1;
        LinkedList listNode2 = new LinkedList();
        tidentifierNode1 = (TIdentifier)nodeArrayList2.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(tidentifierNode1 != null)
	{
	  listNode3.add(tidentifierNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {4, SHIFT, 1}, },
			{{-1, ERROR, 1}, {19, SHIFT, 3}, },
			{{-1, ERROR, 2}, {22, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {0, SHIFT, 4}, },
			{{-1, ERROR, 4}, {19, SHIFT, 5}, },
			{{-1, ERROR, 5}, {14, SHIFT, 6}, },
			{{-1, ERROR, 6}, {19, SHIFT, 8}, },
			{{-1, ERROR, 7}, {5, SHIFT, 9}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 9}, {21, SHIFT, 10}, },
			{{-1, ERROR, 10}, {1, SHIFT, 11}, },
			{{-1, ERROR, 11}, {12, SHIFT, 13}, },
			{{-1, ERROR, 12}, {2, SHIFT, 14}, },
			{{-1, ERROR, 13}, {19, SHIFT, 16}, },
			{{-1, ERROR, 14}, {12, SHIFT, 17}, },
			{{-1, ERROR, 15}, {3, SHIFT, 18}, },
			{{-1, ERROR, 16}, {13, SHIFT, 20}, },
			{{-1, ERROR, 17}, {19, SHIFT, 21}, },
			{{-1, ERROR, 18}, {12, SHIFT, 22}, },
			{{-1, REDUCE, 0}, {15, SHIFT, 23}, {16, SHIFT, 24}, },
			{{-1, ERROR, 20}, {20, SHIFT, 27}, },
			{{-1, ERROR, 21}, {13, SHIFT, 28}, },
			{{-1, ERROR, 22}, {19, SHIFT, 29}, },
			{{-1, ERROR, 23}, {12, SHIFT, 30}, },
			{{-1, ERROR, 24}, {12, SHIFT, 31}, },
			{{-1, REDUCE, 1}, {16, SHIFT, 24}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 5}, {6, SHIFT, 33}, {7, SHIFT, 34}, },
			{{-1, ERROR, 28}, {20, SHIFT, 36}, },
			{{-1, ERROR, 29}, {13, SHIFT, 37}, },
			{{-1, ERROR, 30}, {19, SHIFT, 38}, },
			{{-1, ERROR, 31}, {19, SHIFT, 39}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 33}, {8, SHIFT, 40}, {9, SHIFT, 41}, {10, SHIFT, 42}, {11, SHIFT, 43}, },
			{{-1, ERROR, 34}, {8, SHIFT, 44}, {9, SHIFT, 45}, {10, SHIFT, 46}, {11, SHIFT, 47}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 37}, {20, SHIFT, 48}, },
			{{-1, REDUCE, 25}, {15, SHIFT, 23}, },
			{{-1, REDUCE, 27}, {16, SHIFT, 24}, {17, SHIFT, 50}, {18, SHIFT, 51}, },
			{{-1, ERROR, 40}, {19, SHIFT, 55}, },
			{{-1, ERROR, 41}, {19, SHIFT, 56}, },
			{{-1, ERROR, 42}, {19, SHIFT, 57}, },
			{{-1, ERROR, 43}, {19, SHIFT, 58}, },
			{{-1, ERROR, 44}, {19, SHIFT, 59}, },
			{{-1, ERROR, 45}, {19, SHIFT, 60}, },
			{{-1, ERROR, 46}, {19, SHIFT, 61}, },
			{{-1, ERROR, 47}, {19, SHIFT, 62}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 50}, {19, SHIFT, 63}, },
			{{-1, ERROR, 51}, {19, SHIFT, 64}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 28}, {16, SHIFT, 24}, {18, SHIFT, 51}, },
			{{-1, REDUCE, 29}, {16, SHIFT, 24}, },
			{{-1, REDUCE, 9}, {6, SHIFT, 33}, {7, SHIFT, 34}, },
			{{-1, REDUCE, 11}, {6, SHIFT, 33}, {7, SHIFT, 34}, },
			{{-1, REDUCE, 13}, {6, SHIFT, 33}, {7, SHIFT, 34}, },
			{{-1, REDUCE, 15}, {6, SHIFT, 33}, {7, SHIFT, 34}, },
			{{-1, REDUCE, 17}, {6, SHIFT, 33}, {7, SHIFT, 34}, },
			{{-1, REDUCE, 21}, {6, SHIFT, 33}, {7, SHIFT, 34}, },
			{{-1, REDUCE, 19}, {6, SHIFT, 33}, {7, SHIFT, 34}, },
			{{-1, REDUCE, 23}, {6, SHIFT, 33}, {7, SHIFT, 34}, },
			{{-1, REDUCE, 35}, {17, SHIFT, 50}, },
			{{-1, REDUCE, 37}, {18, SHIFT, 51}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 30}, {16, SHIFT, 24}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 34}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 7}, },
			{{-1, 12}, },
			{{-1, 19}, },
			{{-1, 15}, },
			{{-1, 35}, {55, 68}, {56, 69}, {57, 70}, {58, 71}, {59, 72}, {60, 73}, {61, 74}, {62, 75}, },
			{{-1, 25}, {38, 49}, },
			{{-1, 26}, {25, 32}, {39, 52}, {53, 65}, {54, 67}, {66, 78}, },
			{{-1, 53}, {63, 76}, },
			{{-1, 54}, {53, 66}, {64, 77}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'component:'",
			"expecting: identifier",
			"expecting: EOF",
			"expecting: 'configuration-tag:'",
			"expecting: 'repository:'",
			"expecting: 'namespace:'",
			"expecting: namespace",
			"expecting: 'vertex:'",
			"expecting: 'name:'",
			"expecting: 'cell:'",
			"expecting: 'state:'",
			"expecting: 'dastgen-file:'",
			"expecting: 'event-mapping:', 'adapter:', EOF",
			"expecting: filename",
			"expecting: 'adapter:', EOF",
			"expecting: 'cell:', 'read', 'write'",
			"expecting: 'scalar:', 'vector:', 'vector2PowD:', 'stencil:'",
			"expecting: 'adapter:', 'merge-with-user-defined-mapping:', 'merge-with-predefined-mapping:', EOF",
			"expecting: 'adapter:', 'merge-with-predefined-mapping:', EOF",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 1, 4, 1, 5, 5, 6, 7, 8, 9, 1, 8, 10, 11, 1, 8, 12, 13, 11, 1, 8, 8, 14, 2, 15, 13, 11, 1, 1, 2, 16, 16, 9, 10, 13, 12, 17, 1, 1, 1, 1, 1, 1, 1, 1, 12, 14, 1, 1, 2, 18, 14, 15, 15, 15, 15, 15, 15, 15, 15, 17, 18, 2, 14, 2, 9, 9, 9, 9, 9, 9, 9, 9, 18, 14, 2, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
