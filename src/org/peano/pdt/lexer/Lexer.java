/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.peano.pdt.lexer;

import java.io.*;
import org.peano.pdt.node.*;

@SuppressWarnings("nls")
public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    @SuppressWarnings("unused")
    protected void filter() throws LexerException, IOException
    {
        // Do nothing
    }

    public Lexer(@SuppressWarnings("hiding") PushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        return this.token;
    }

    public Token next() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        Token result = this.token;
        this.token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = this.pos;
        int start_line = this.line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        @SuppressWarnings("hiding") int[][][] gotoTable = Lexer.gotoTable[this.state.id()];
        @SuppressWarnings("hiding") int[] accept = Lexer.accept[this.state.id()];
        this.text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(this.cr)
                    {
                        this.cr = false;
                    }
                    else
                    {
                        this.line++;
                        this.pos = 0;
                    }
                    break;
                case 13:
                    this.line++;
                    this.pos = 0;
                    this.cr = true;
                    break;
                default:
                    this.pos++;
                    this.cr = false;
                    break;
                }

                this.text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = this.text.length();
                    accept_pos = this.pos;
                    accept_line = this.line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            @SuppressWarnings("hiding") Token token = new0(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            @SuppressWarnings("hiding") Token token = new1(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            @SuppressWarnings("hiding") Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            @SuppressWarnings("hiding") Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            @SuppressWarnings("hiding") Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            @SuppressWarnings("hiding") Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            @SuppressWarnings("hiding") Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            @SuppressWarnings("hiding") Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            @SuppressWarnings("hiding") Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            @SuppressWarnings("hiding") Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            @SuppressWarnings("hiding") Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            @SuppressWarnings("hiding") Token token = new11(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            @SuppressWarnings("hiding") Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            @SuppressWarnings("hiding") Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            @SuppressWarnings("hiding") Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            @SuppressWarnings("hiding") Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            @SuppressWarnings("hiding") Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            @SuppressWarnings("hiding") Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            @SuppressWarnings("hiding") Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            @SuppressWarnings("hiding") Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            @SuppressWarnings("hiding") Token token = new20(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            @SuppressWarnings("hiding") Token token = new21(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            @SuppressWarnings("hiding") Token token = new22(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            @SuppressWarnings("hiding") Token token = new23(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            @SuppressWarnings("hiding") Token token = new24(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            @SuppressWarnings("hiding") Token token = new25(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            @SuppressWarnings("hiding") Token token = new26(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(this.text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + this.text);
                    }

                    @SuppressWarnings("hiding") EOF token = new EOF(
                        start_line + 1,
                        start_pos + 1);
                    return token;
                }
            }
        }
    }

    Token new0(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenVertex(line, pos); }
    Token new1(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenCell(line, pos); }
    Token new2(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenState(line, pos); }
    Token new3(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenComponent(line, pos); }
    Token new4(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenNamespace(line, pos); }
    Token new5(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenRead(line, pos); }
    Token new6(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenWrite(line, pos); }
    Token new7(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenScalar(line, pos); }
    Token new8(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenVectorD(line, pos); }
    Token new9(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenVectorTwoPowD(line, pos); }
    Token new10(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenStencil(line, pos); }
    Token new11(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenName(line, pos); }
    Token new12(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenDastgenFile(line, pos); }
    Token new13(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenEventMapping(line, pos); }
    Token new14(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenOpenBracket(line, pos); }
    Token new15(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenCloseBracket(line, pos); }
    Token new16(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenComma(line, pos); }
    Token new17(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenAdapter(line, pos); }
    Token new18(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenMergeWithUserDefinedAdapter(line, pos); }
    Token new19(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenMergeWithPredefinedAdapter(line, pos); }
    Token new20(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBlank(text, line, pos); }
    Token new21(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIdentifier(text, line, pos); }
    Token new22(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TFilename(text, line, pos); }
    Token new23(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNamespace(text, line, pos); }
    Token new24(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTraditionalComment(text, line, pos); }
    Token new25(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDocumentationComment(text, line, pos); }
    Token new26(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEndOfLineComment(text, line, pos); }

    private int getChar() throws IOException
    {
        if(this.eof)
        {
            return -1;
        }

        int result = this.in.read();

        if(result == -1)
        {
            this.eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = this.text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            this.eof = false;

            this.in.unread(this.text.charAt(i));
        }
    }

    protected void unread(@SuppressWarnings("hiding") Token token) throws IOException
    {
        @SuppressWarnings("hiding") String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            this.eof = false;

            this.in.unread(text.charAt(i));
        }

        this.pos = token.getPos() - 1;
        this.line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(this.text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {40, 40, 5}, {41, 41, 6}, {44, 44, 7}, {45, 45, 8}, {46, 46, 9}, {47, 47, 10}, {48, 57, 11}, {58, 58, 12}, {65, 90, 13}, {95, 95, 14}, {97, 97, 15}, {98, 98, 13}, {99, 99, 16}, {100, 100, 17}, {101, 101, 18}, {102, 108, 13}, {109, 109, 19}, {110, 110, 20}, {111, 113, 13}, {114, 114, 21}, {115, 115, 22}, {116, 117, 13}, {118, 118, 23}, {119, 119, 24}, {120, 122, 13}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {},
            {},
            {},
            {{45, 45, 8}, {46, 46, 25}, {47, 47, 26}, {48, 57, 27}, {65, 90, 28}, {95, 95, 29}, {97, 122, 28}, },
            {{45, 46, -2}, {47, 47, 26}, {48, 57, 11}, {58, 58, 30}, {65, 90, 31}, {95, 95, 32}, {97, 122, 31}, },
            {{42, 42, 33}, {45, 46, -10}, {47, 47, 34}, {48, 122, -10}, },
            {{45, 122, -11}, },
            {{58, 58, 35}, },
            {{45, 47, -11}, {48, 57, 36}, {58, 58, 30}, {65, 90, 37}, {95, 95, 38}, {97, 122, 37}, },
            {{45, 122, -15}, },
            {{45, 95, -15}, {97, 99, 37}, {100, 100, 39}, {101, 122, 37}, },
            {{45, 95, -15}, {97, 100, 37}, {101, 101, 40}, {102, 110, 37}, {111, 111, 41}, {112, 122, 37}, },
            {{45, 95, -15}, {97, 97, 42}, {98, 122, 37}, },
            {{45, 95, -15}, {97, 117, 37}, {118, 118, 43}, {119, 122, 37}, },
            {{45, 100, -18}, {101, 101, 44}, {102, 122, 37}, },
            {{45, 95, -15}, {97, 97, 45}, {98, 122, 37}, },
            {{45, 100, -18}, {101, 101, 46}, {102, 122, 37}, },
            {{45, 95, -15}, {97, 98, 37}, {99, 99, 47}, {100, 115, 37}, {116, 116, 48}, {117, 122, 37}, },
            {{45, 100, -18}, {101, 101, 49}, {102, 122, 37}, },
            {{45, 95, -15}, {97, 113, 37}, {114, 114, 50}, {115, 122, 37}, },
            {{45, 122, -10}, },
            {{45, 46, -10}, {48, 122, -10}, },
            {{45, 122, -10}, },
            {{45, 122, -10}, },
            {{45, 122, -10}, },
            {{58, 58, 51}, },
            {{45, 122, -11}, },
            {{45, 122, -11}, },
            {{0, 41, 52}, {42, 42, 53}, {43, 127, 52}, },
            {{0, 9, 54}, {10, 10, 55}, {11, 12, 54}, {13, 13, 56}, {14, 127, 54}, },
            {{46, 46, 57}, {48, 57, 58}, {65, 90, 59}, {95, 95, 60}, {97, 122, 59}, },
            {{45, 122, -15}, },
            {{45, 122, -15}, },
            {{45, 122, -15}, },
            {{45, 95, -15}, {97, 97, 61}, {98, 122, 37}, },
            {{45, 95, -15}, {97, 107, 37}, {108, 108, 62}, {109, 122, 37}, },
            {{45, 95, -15}, {97, 108, 37}, {109, 109, 63}, {110, 122, 37}, },
            {{45, 95, -15}, {97, 114, 37}, {115, 115, 64}, {116, 122, 37}, },
            {{45, 100, -18}, {101, 101, 65}, {102, 122, 37}, },
            {{45, 113, -26}, {114, 114, 66}, {115, 122, 37}, },
            {{45, 108, -43}, {109, 109, 67}, {110, 122, 37}, },
            {{45, 95, -15}, {97, 97, 68}, {98, 122, 37}, },
            {{45, 95, -15}, {97, 97, 69}, {98, 122, 37}, },
            {{45, 95, -15}, {97, 97, 70}, {98, 100, 37}, {101, 101, 71}, {102, 122, 37}, },
            {{45, 98, -24}, {99, 99, 72}, {100, 113, 37}, {114, 114, 73}, {115, 122, 37}, },
            {{45, 95, -15}, {97, 104, 37}, {105, 105, 74}, {106, 122, 37}, },
            {{46, 122, -37}, },
            {{0, 41, 52}, {42, 42, 75}, {43, 127, 52}, },
            {{0, 41, 76}, {42, 42, 77}, {43, 46, 76}, {47, 47, 78}, {48, 127, 76}, },
            {{0, 127, -36}, },
            {},
            {{10, 10, 79}, },
            {{46, 57, -37}, {58, 58, 30}, {65, 122, -37}, },
            {{46, 122, -59}, },
            {{46, 122, -59}, },
            {{46, 122, -59}, },
            {{45, 95, -15}, {97, 111, 37}, {112, 112, 80}, {113, 122, 37}, },
            {{45, 107, -42}, {108, 108, 81}, {109, 122, 37}, },
            {{45, 111, -63}, {112, 112, 82}, {113, 122, 37}, },
            {{45, 95, -15}, {97, 115, 37}, {116, 116, 83}, {117, 122, 37}, },
            {{45, 95, -15}, {97, 109, 37}, {110, 110, 84}, {111, 122, 37}, },
            {{45, 95, -15}, {97, 102, 37}, {103, 103, 85}, {104, 122, 37}, },
            {{45, 100, -18}, {101, 101, 86}, {102, 122, 37}, },
            {{45, 99, -17}, {100, 100, 87}, {101, 122, 37}, },
            {{45, 107, -42}, {108, 108, 88}, {109, 122, 37}, },
            {{45, 115, -66}, {116, 116, 89}, {117, 122, 37}, },
            {{45, 109, -67}, {110, 110, 90}, {111, 122, 37}, },
            {{45, 115, -66}, {116, 116, 91}, {117, 122, 37}, },
            {{45, 115, -66}, {116, 116, 92}, {117, 122, 37}, },
            {{45, 115, -66}, {116, 116, 93}, {117, 122, 37}, },
            {{0, 41, 94}, {42, 42, 75}, {43, 46, 94}, {47, 47, 95}, {48, 127, 94}, },
            {{0, 41, 96}, {42, 42, 97}, {43, 127, 96}, },
            {{0, 127, -55}, },
            {},
            {},
            {{45, 115, -66}, {116, 116, 98}, {117, 122, 37}, },
            {{45, 57, -15}, {58, 58, 99}, {65, 122, -15}, },
            {{45, 95, -15}, {97, 110, 37}, {111, 111, 100}, {112, 122, 37}, },
            {{45, 102, -68}, {103, 103, 101}, {104, 122, 37}, },
            {{45, 115, -66}, {116, 116, 102}, {117, 122, 37}, },
            {{45, 100, -18}, {101, 101, 103}, {102, 122, 37}, },
            {{45, 57, -15}, {58, 58, 104}, {65, 114, -44}, {115, 115, 105}, {116, 122, 37}, },
            {{45, 122, -15}, },
            {{45, 95, -15}, {97, 97, 106}, {98, 122, 37}, },
            {{45, 100, -18}, {101, 101, 107}, {102, 122, 37}, },
            {{45, 98, -24}, {99, 99, 108}, {100, 122, 37}, },
            {{45, 110, -84}, {111, 111, 109}, {112, 122, 37}, },
            {{45, 100, -18}, {101, 101, 110}, {102, 122, 37}, },
            {{45, 100, -18}, {101, 101, 111}, {102, 122, 37}, },
            {{0, 41, 112}, {42, 42, 113}, {43, 127, 112}, },
            {},
            {{0, 127, -78}, },
            {{0, 41, 76}, {42, 42, 97}, {43, 127, -55}, },
            {{45, 100, -18}, {101, 101, 114}, {102, 122, 37}, },
            {{58, 58, 51}, },
            {{45, 109, -67}, {110, 110, 115}, {111, 122, 37}, },
            {{45, 100, -18}, {101, 101, 116}, {102, 122, 37}, },
            {{45, 45, 117}, {46, 122, -15}, },
            {{45, 45, 118}, {46, 122, -15}, },
            {{58, 58, 51}, },
            {{45, 111, -63}, {112, 112, 119}, {113, 122, 37}, },
            {{45, 113, -26}, {114, 114, 120}, {115, 122, 37}, },
            {{45, 57, -15}, {58, 58, 121}, {65, 122, -15}, },
            {{45, 104, -52}, {105, 105, 122}, {106, 122, 37}, },
            {{45, 113, -26}, {114, 114, 123}, {115, 122, 37}, },
            {{45, 95, -15}, {97, 119, 37}, {120, 120, 124}, {121, 122, 37}, },
            {{45, 122, -15}, },
            {{0, 127, -96}, },
            {{0, 41, 94}, {42, 42, 113}, {43, 127, -77}, },
            {{45, 113, -26}, {114, 114, 125}, {115, 122, 37}, },
            {{45, 100, -18}, {101, 101, 126}, {102, 122, 37}, },
            {{45, 109, -67}, {110, 110, 127}, {111, 122, 37}, },
            {{45, 95, -10}, {97, 108, 28}, {109, 109, 128}, {110, 122, 28}, },
            {{45, 95, -10}, {97, 118, 28}, {119, 119, 129}, {120, 122, 28}, },
            {{45, 95, -15}, {97, 97, 130}, {98, 122, 37}, },
            {{45, 57, -15}, {58, 58, 131}, {65, 122, -15}, },
            {{58, 58, 51}, },
            {{45, 107, -42}, {108, 108, 132}, {109, 122, 37}, },
            {{45, 47, -11}, {48, 49, 36}, {50, 50, 133}, {51, 57, 36}, {58, 58, 134}, {65, 122, -15}, },
            {{45, 57, -15}, {58, 58, 135}, {65, 122, -15}, },
            {{45, 57, -15}, {58, 58, 136}, {65, 122, -15}, },
            {{45, 109, -67}, {110, 110, 137}, {111, 122, 37}, },
            {{45, 45, 138}, {46, 122, -15}, },
            {{45, 95, -10}, {97, 97, 139}, {98, 122, 28}, },
            {{45, 95, -10}, {97, 104, 28}, {105, 105, 140}, {106, 122, 28}, },
            {{45, 98, -24}, {99, 99, 141}, {100, 122, 37}, },
            {{58, 58, 51}, },
            {{45, 57, -15}, {58, 58, 142}, {65, 122, -15}, },
            {{45, 58, -15}, {65, 79, 37}, {80, 80, 143}, {81, 90, 37}, {95, 122, -15}, },
            {{58, 58, 51}, },
            {{58, 58, 51}, },
            {{58, 58, 51}, },
            {{45, 115, -66}, {116, 116, 144}, {117, 122, 37}, },
            {{45, 95, -10}, {97, 101, 28}, {102, 102, 145}, {103, 122, 28}, },
            {{45, 95, -10}, {97, 111, 28}, {112, 112, 146}, {113, 122, 28}, },
            {{45, 95, -10}, {97, 115, 28}, {116, 116, 147}, {117, 122, 28}, },
            {{45, 100, -18}, {101, 101, 148}, {102, 122, 37}, },
            {{58, 58, 51}, },
            {{45, 110, -84}, {111, 111, 149}, {112, 122, 37}, },
            {{45, 57, -15}, {58, 58, 150}, {65, 122, -15}, },
            {{45, 104, -131}, {105, 105, 151}, {106, 122, 28}, },
            {{45, 111, -141}, {112, 112, 152}, {113, 122, 28}, },
            {{45, 95, -10}, {97, 103, 28}, {104, 104, 153}, {105, 122, 28}, },
            {{45, 57, -15}, {58, 58, 154}, {65, 122, -15}, },
            {{45, 95, -15}, {97, 118, 37}, {119, 119, 155}, {120, 122, 37}, },
            {{58, 58, 51}, },
            {{45, 95, -10}, {97, 107, 28}, {108, 108, 156}, {109, 122, 28}, },
            {{45, 104, -131}, {105, 105, 157}, {106, 122, 28}, },
            {{45, 45, 158}, {46, 122, -10}, },
            {{58, 58, 51}, },
            {{45, 58, -15}, {65, 67, 37}, {68, 68, 159}, {69, 90, 37}, {95, 122, -15}, },
            {{45, 95, -10}, {97, 100, 28}, {101, 101, 160}, {102, 122, 28}, },
            {{45, 95, -10}, {97, 109, 28}, {110, 110, 161}, {111, 122, 28}, },
            {{45, 111, -141}, {112, 112, 162}, {113, 116, 28}, {117, 117, 163}, {118, 122, 28}, },
            {{45, 57, -15}, {58, 58, 164}, {65, 122, -15}, },
            {{45, 57, -10}, {58, 58, 165}, {65, 122, -10}, },
            {{45, 95, -10}, {97, 102, 28}, {103, 103, 166}, {104, 122, 28}, },
            {{45, 95, -10}, {97, 113, 28}, {114, 114, 167}, {115, 122, 28}, },
            {{45, 95, -10}, {97, 114, 28}, {115, 115, 168}, {116, 122, 28}, },
            {{58, 58, 51}, },
            {},
            {{45, 57, -10}, {58, 58, 169}, {65, 122, -10}, },
            {{45, 100, -158}, {101, 101, 170}, {102, 122, 28}, },
            {{45, 100, -158}, {101, 101, 171}, {102, 122, 28}, },
            {},
            {{45, 95, -10}, {97, 99, 28}, {100, 100, 172}, {101, 122, 28}, },
            {{45, 113, -164}, {114, 114, 173}, {115, 122, 28}, },
            {{45, 100, -158}, {101, 101, 174}, {102, 122, 28}, },
            {{45, 45, 175}, {46, 122, -10}, },
            {{45, 101, -140}, {102, 102, 176}, {103, 122, 28}, },
            {{45, 99, -172}, {100, 100, 177}, {101, 122, 28}, },
            {{45, 104, -131}, {105, 105, 178}, {106, 122, 28}, },
            {{45, 100, -158}, {101, 101, 179}, {102, 122, 28}, },
            {{45, 109, -159}, {110, 110, 180}, {111, 122, 28}, },
            {{45, 101, -140}, {102, 102, 181}, {103, 122, 28}, },
            {{45, 100, -158}, {101, 101, 182}, {102, 122, 28}, },
            {{45, 104, -131}, {105, 105, 183}, {106, 122, 28}, },
            {{45, 99, -172}, {100, 100, 184}, {101, 122, 28}, },
            {{45, 109, -159}, {110, 110, 185}, {111, 122, 28}, },
            {{45, 45, 186}, {46, 122, -10}, },
            {{45, 100, -158}, {101, 101, 187}, {102, 122, 28}, },
            {{45, 108, -119}, {109, 109, 188}, {110, 122, 28}, },
            {{45, 99, -172}, {100, 100, 189}, {101, 122, 28}, },
            {{45, 95, -10}, {97, 97, 190}, {98, 122, 28}, },
            {{45, 45, 191}, {46, 122, -10}, },
            {{45, 111, -141}, {112, 112, 192}, {113, 122, 28}, },
            {{45, 108, -119}, {109, 109, 193}, {110, 122, 28}, },
            {{45, 111, -141}, {112, 112, 194}, {113, 122, 28}, },
            {{45, 95, -10}, {97, 97, 195}, {98, 122, 28}, },
            {{45, 104, -131}, {105, 105, 196}, {106, 122, 28}, },
            {{45, 111, -141}, {112, 112, 197}, {113, 122, 28}, },
            {{45, 109, -159}, {110, 110, 198}, {111, 122, 28}, },
            {{45, 111, -141}, {112, 112, 199}, {113, 122, 28}, },
            {{45, 102, -163}, {103, 103, 200}, {104, 122, 28}, },
            {{45, 104, -131}, {105, 105, 201}, {106, 122, 28}, },
            {{45, 57, -10}, {58, 58, 202}, {65, 122, -10}, },
            {{45, 109, -159}, {110, 110, 203}, {111, 122, 28}, },
            {},
            {{45, 102, -163}, {103, 103, 204}, {104, 122, 28}, },
            {{45, 57, -10}, {58, 58, 205}, {65, 122, -10}, },
            {},
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {-1, 20, 20, 20, 20, 14, 15, 16, 22, 22, -1, 22, -1, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, -1, 22, 22, 22, -1, 22, 22, -1, -1, -1, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, -1, -1, -1, -1, 26, 26, 23, 23, 23, 23, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, -1, -1, -1, 25, 26, 21, 21, 21, 21, 21, 21, 21, 5, 21, 21, 21, 21, 21, 21, -1, 24, -1, -1, 21, 1, 21, 21, 21, 21, 11, 21, 21, 21, 21, 21, 21, 6, -1, -1, 21, 21, 21, 22, 22, 21, 21, 2, 21, 21, 21, 21, 21, 21, 22, 22, 21, 7, 21, 21, 8, 0, 17, 21, 22, 22, 22, 21, 10, 21, 21, 22, 22, 22, 21, 21, 3, 22, 22, 22, 4, 21, 22, 22, 22, 21, 22, 22, 22, 22, 9, 12, 22, 22, 22, 13, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 19, 22, 22, 18, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(@SuppressWarnings("hiding") int id)
        {
            this.id = id;
        }

        public int id()
        {
            return this.id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
