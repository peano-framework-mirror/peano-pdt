/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.peano.pdt.lexer;

import java.io.*;
import org.peano.pdt.node.*;

@SuppressWarnings("nls")
public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    @SuppressWarnings("unused")
    protected void filter() throws LexerException, IOException
    {
        // Do nothing
    }

    public Lexer(@SuppressWarnings("hiding") PushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        return this.token;
    }

    public Token next() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        Token result = this.token;
        this.token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = this.pos;
        int start_line = this.line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        @SuppressWarnings("hiding") int[][][] gotoTable = Lexer.gotoTable[this.state.id()];
        @SuppressWarnings("hiding") int[] accept = Lexer.accept[this.state.id()];
        this.text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(this.cr)
                    {
                        this.cr = false;
                    }
                    else
                    {
                        this.line++;
                        this.pos = 0;
                    }
                    break;
                case 13:
                    this.line++;
                    this.pos = 0;
                    this.cr = true;
                    break;
                default:
                    this.pos++;
                    this.cr = false;
                    break;
                }

                this.text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = this.text.length();
                    accept_pos = this.pos;
                    accept_line = this.line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            @SuppressWarnings("hiding") Token token = new0(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            @SuppressWarnings("hiding") Token token = new1(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            @SuppressWarnings("hiding") Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            @SuppressWarnings("hiding") Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            @SuppressWarnings("hiding") Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            @SuppressWarnings("hiding") Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            @SuppressWarnings("hiding") Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            @SuppressWarnings("hiding") Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            @SuppressWarnings("hiding") Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            @SuppressWarnings("hiding") Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            @SuppressWarnings("hiding") Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            @SuppressWarnings("hiding") Token token = new11(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            @SuppressWarnings("hiding") Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            @SuppressWarnings("hiding") Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            @SuppressWarnings("hiding") Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            @SuppressWarnings("hiding") Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            @SuppressWarnings("hiding") Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            @SuppressWarnings("hiding") Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            @SuppressWarnings("hiding") Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            @SuppressWarnings("hiding") Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            @SuppressWarnings("hiding") Token token = new20(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            @SuppressWarnings("hiding") Token token = new21(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            @SuppressWarnings("hiding") Token token = new22(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            @SuppressWarnings("hiding") Token token = new23(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            @SuppressWarnings("hiding") Token token = new24(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            @SuppressWarnings("hiding") Token token = new25(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            @SuppressWarnings("hiding") Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            @SuppressWarnings("hiding") Token token = new27(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            @SuppressWarnings("hiding") Token token = new28(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            @SuppressWarnings("hiding") Token token = new29(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            @SuppressWarnings("hiding") Token token = new30(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            @SuppressWarnings("hiding") Token token = new31(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            @SuppressWarnings("hiding") Token token = new32(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            @SuppressWarnings("hiding") Token token = new33(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            @SuppressWarnings("hiding") Token token = new34(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                            @SuppressWarnings("hiding") Token token = new35(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                            @SuppressWarnings("hiding") Token token = new36(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 37:
                        {
                            @SuppressWarnings("hiding") Token token = new37(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(this.text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + this.text);
                    }

                    @SuppressWarnings("hiding") EOF token = new EOF(
                        start_line + 1,
                        start_pos + 1);
                    return token;
                }
            }
        }
    }

    Token new0(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenVertex(line, pos); }
    Token new1(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenCell(line, pos); }
    Token new2(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenState(line, pos); }
    Token new3(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenComponent(line, pos); }
    Token new4(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenNamespace(line, pos); }
    Token new5(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenRead(line, pos); }
    Token new6(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenWrite(line, pos); }
    Token new7(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenScalarDouble(line, pos); }
    Token new8(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenScalarInt(line, pos); }
    Token new9(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenScalarComplex(line, pos); }
    Token new10(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenVectorDDouble(line, pos); }
    Token new11(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenVectorDInt(line, pos); }
    Token new12(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenVectorDComplex(line, pos); }
    Token new13(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenVectorTwoPowDDouble(line, pos); }
    Token new14(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenVectorTwoPowDInt(line, pos); }
    Token new15(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenVectorTwoPowDComplex(line, pos); }
    Token new16(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenVectorFivePowDDouble(line, pos); }
    Token new17(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenVectorFivePowDInt(line, pos); }
    Token new18(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenVectorFivePowDComplex(line, pos); }
    Token new19(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenStencilDouble(line, pos); }
    Token new20(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenStencilInt(line, pos); }
    Token new21(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenStencilComplex(line, pos); }
    Token new22(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenName(line, pos); }
    Token new23(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenDastgenFile(line, pos); }
    Token new24(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenEventMapping(line, pos); }
    Token new25(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenOpenBracket(line, pos); }
    Token new26(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenCloseBracket(line, pos); }
    Token new27(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenComma(line, pos); }
    Token new28(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenAdapter(line, pos); }
    Token new29(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenMergeWithUserDefinedAdapter(line, pos); }
    Token new30(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenMergeWithPredefinedAdapter(line, pos); }
    Token new31(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBlank(text, line, pos); }
    Token new32(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIdentifier(text, line, pos); }
    Token new33(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TFilename(text, line, pos); }
    Token new34(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNamespace(text, line, pos); }
    Token new35(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTraditionalComment(text, line, pos); }
    Token new36(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDocumentationComment(text, line, pos); }
    Token new37(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEndOfLineComment(text, line, pos); }

    private int getChar() throws IOException
    {
        if(this.eof)
        {
            return -1;
        }

        int result = this.in.read();

        if(result == -1)
        {
            this.eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = this.text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            this.eof = false;

            this.in.unread(this.text.charAt(i));
        }
    }

    protected void unread(@SuppressWarnings("hiding") Token token) throws IOException
    {
        @SuppressWarnings("hiding") String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            this.eof = false;

            this.in.unread(text.charAt(i));
        }

        this.pos = token.getPos() - 1;
        this.line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(this.text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {40, 40, 5}, {41, 41, 6}, {44, 44, 7}, {45, 45, 8}, {46, 46, 9}, {47, 47, 10}, {48, 57, 11}, {58, 58, 12}, {65, 90, 13}, {95, 95, 14}, {97, 97, 15}, {98, 98, 13}, {99, 99, 16}, {100, 100, 17}, {101, 101, 18}, {102, 104, 13}, {105, 105, 19}, {106, 108, 13}, {109, 109, 20}, {110, 110, 21}, {111, 113, 13}, {114, 114, 22}, {115, 115, 23}, {116, 117, 13}, {118, 118, 24}, {119, 119, 25}, {120, 122, 13}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {},
            {},
            {},
            {{45, 45, 8}, {46, 46, 26}, {47, 47, 27}, {48, 57, 28}, {65, 90, 29}, {95, 95, 30}, {97, 122, 29}, },
            {{45, 46, -2}, {47, 47, 27}, {48, 57, 11}, {58, 58, 31}, {65, 90, 32}, {95, 95, 33}, {97, 122, 32}, },
            {{42, 42, 34}, {45, 46, -10}, {47, 47, 35}, {48, 122, -10}, },
            {{45, 122, -11}, },
            {{58, 58, 36}, },
            {{45, 47, -11}, {48, 57, 37}, {58, 58, 31}, {65, 90, 38}, {95, 95, 39}, {97, 122, 38}, },
            {{45, 122, -15}, },
            {{45, 95, -15}, {97, 99, 38}, {100, 100, 40}, {101, 122, 38}, },
            {{45, 95, -15}, {97, 100, 38}, {101, 101, 41}, {102, 110, 38}, {111, 111, 42}, {112, 122, 38}, },
            {{45, 95, -15}, {97, 97, 43}, {98, 122, 38}, },
            {{45, 95, -15}, {97, 117, 38}, {118, 118, 44}, {119, 122, 38}, },
            {{45, 95, -15}, {97, 109, 38}, {110, 110, 45}, {111, 122, 38}, },
            {{45, 100, -18}, {101, 101, 46}, {102, 122, 38}, },
            {{45, 95, -15}, {97, 97, 47}, {98, 122, 38}, },
            {{45, 100, -18}, {101, 101, 48}, {102, 122, 38}, },
            {{45, 95, -15}, {97, 98, 38}, {99, 99, 49}, {100, 115, 38}, {116, 116, 50}, {117, 122, 38}, },
            {{45, 100, -18}, {101, 101, 51}, {102, 122, 38}, },
            {{45, 95, -15}, {97, 113, 38}, {114, 114, 52}, {115, 122, 38}, },
            {{45, 122, -10}, },
            {{45, 46, -10}, {48, 122, -10}, },
            {{45, 122, -10}, },
            {{45, 122, -10}, },
            {{45, 122, -10}, },
            {{58, 58, 53}, },
            {{45, 122, -11}, },
            {{45, 122, -11}, },
            {{0, 41, 54}, {42, 42, 55}, {43, 127, 54}, },
            {{0, 9, 56}, {10, 10, 57}, {11, 12, 56}, {13, 13, 58}, {14, 127, 56}, },
            {{46, 46, 59}, {48, 57, 60}, {65, 90, 61}, {95, 95, 62}, {97, 122, 61}, },
            {{45, 122, -15}, },
            {{45, 122, -15}, },
            {{45, 122, -15}, },
            {{45, 95, -15}, {97, 97, 63}, {98, 122, 38}, },
            {{45, 95, -15}, {97, 107, 38}, {108, 108, 64}, {109, 122, 38}, },
            {{45, 95, -15}, {97, 108, 38}, {109, 109, 65}, {110, 122, 38}, },
            {{45, 95, -15}, {97, 114, 38}, {115, 115, 66}, {116, 122, 38}, },
            {{45, 100, -18}, {101, 101, 67}, {102, 122, 38}, },
            {{45, 95, -15}, {97, 115, 38}, {116, 116, 68}, {117, 122, 38}, },
            {{45, 113, -27}, {114, 114, 69}, {115, 122, 38}, },
            {{45, 108, -44}, {109, 109, 70}, {110, 122, 38}, },
            {{45, 95, -15}, {97, 97, 71}, {98, 122, 38}, },
            {{45, 95, -15}, {97, 97, 72}, {98, 122, 38}, },
            {{45, 95, -15}, {97, 97, 73}, {98, 100, 38}, {101, 101, 74}, {102, 122, 38}, },
            {{45, 98, -25}, {99, 99, 75}, {100, 113, 38}, {114, 114, 76}, {115, 122, 38}, },
            {{45, 95, -15}, {97, 104, 38}, {105, 105, 77}, {106, 122, 38}, },
            {{46, 122, -38}, },
            {{0, 41, 54}, {42, 42, 78}, {43, 127, 54}, },
            {{0, 41, 79}, {42, 42, 80}, {43, 46, 79}, {47, 47, 81}, {48, 127, 79}, },
            {{0, 127, -37}, },
            {},
            {{10, 10, 82}, },
            {{46, 57, -38}, {58, 58, 31}, {65, 122, -38}, },
            {{46, 122, -61}, },
            {{46, 122, -61}, },
            {{46, 122, -61}, },
            {{45, 95, -15}, {97, 111, 38}, {112, 112, 83}, {113, 122, 38}, },
            {{45, 107, -43}, {108, 108, 84}, {109, 122, 38}, },
            {{45, 111, -65}, {112, 112, 85}, {113, 122, 38}, },
            {{45, 115, -47}, {116, 116, 86}, {117, 122, 38}, },
            {{45, 109, -21}, {110, 110, 87}, {111, 122, 38}, },
            {{45, 100, -18}, {101, 101, 88}, {102, 122, 38}, },
            {{45, 95, -15}, {97, 102, 38}, {103, 103, 89}, {104, 122, 38}, },
            {{45, 100, -18}, {101, 101, 90}, {102, 122, 38}, },
            {{45, 99, -17}, {100, 100, 91}, {101, 122, 38}, },
            {{45, 107, -43}, {108, 108, 92}, {109, 122, 38}, },
            {{45, 115, -47}, {116, 116, 93}, {117, 122, 38}, },
            {{45, 109, -21}, {110, 110, 94}, {111, 122, 38}, },
            {{45, 115, -47}, {116, 116, 95}, {117, 122, 38}, },
            {{45, 115, -47}, {116, 116, 96}, {117, 122, 38}, },
            {{45, 115, -47}, {116, 116, 97}, {117, 122, 38}, },
            {{0, 41, 98}, {42, 42, 78}, {43, 46, 98}, {47, 47, 99}, {48, 127, 98}, },
            {{0, 41, 100}, {42, 42, 101}, {43, 127, 100}, },
            {{0, 127, -57}, },
            {},
            {},
            {{45, 115, -47}, {116, 116, 102}, {117, 122, 38}, },
            {{45, 57, -15}, {58, 58, 103}, {65, 122, -15}, },
            {{45, 95, -15}, {97, 110, 38}, {111, 111, 104}, {112, 122, 38}, },
            {{45, 102, -71}, {103, 103, 105}, {104, 122, 38}, },
            {{45, 115, -47}, {116, 116, 106}, {117, 122, 38}, },
            {{45, 113, -27}, {114, 114, 107}, {115, 122, 38}, },
            {{45, 100, -18}, {101, 101, 108}, {102, 122, 38}, },
            {{45, 57, -15}, {58, 58, 109}, {65, 114, -45}, {115, 115, 110}, {116, 122, 38}, },
            {{45, 122, -15}, },
            {{45, 95, -15}, {97, 97, 111}, {98, 122, 38}, },
            {{45, 100, -18}, {101, 101, 112}, {102, 122, 38}, },
            {{45, 98, -25}, {99, 99, 113}, {100, 122, 38}, },
            {{45, 110, -87}, {111, 111, 114}, {112, 122, 38}, },
            {{45, 100, -18}, {101, 101, 115}, {102, 122, 38}, },
            {{45, 100, -18}, {101, 101, 116}, {102, 122, 38}, },
            {{0, 41, 117}, {42, 42, 118}, {43, 127, 117}, },
            {},
            {{0, 127, -81}, },
            {{0, 41, 79}, {42, 42, 101}, {43, 127, -57}, },
            {{45, 100, -18}, {101, 101, 119}, {102, 122, 38}, },
            {{58, 58, 53}, },
            {{45, 109, -21}, {110, 110, 120}, {111, 122, 38}, },
            {{45, 100, -18}, {101, 101, 121}, {102, 122, 38}, },
            {{45, 45, 122}, {46, 122, -15}, },
            {{45, 102, -71}, {103, 103, 123}, {104, 122, 38}, },
            {{45, 45, 124}, {46, 122, -15}, },
            {{58, 58, 53}, },
            {{45, 111, -65}, {112, 112, 125}, {113, 122, 38}, },
            {{45, 113, -27}, {114, 114, 126}, {115, 122, 38}, },
            {{45, 57, -15}, {58, 58, 127}, {65, 122, -15}, },
            {{45, 104, -54}, {105, 105, 128}, {106, 122, 38}, },
            {{45, 113, -27}, {114, 114, 129}, {115, 122, 38}, },
            {{45, 95, -15}, {97, 119, 38}, {120, 120, 130}, {121, 122, 38}, },
            {{45, 122, -15}, },
            {{0, 127, -100}, },
            {{0, 41, 98}, {42, 42, 118}, {43, 127, -80}, },
            {{45, 113, -27}, {114, 114, 131}, {115, 122, 38}, },
            {{45, 100, -18}, {101, 101, 132}, {102, 122, 38}, },
            {{45, 109, -21}, {110, 110, 133}, {111, 122, 38}, },
            {{45, 95, -10}, {97, 108, 29}, {109, 109, 134}, {110, 122, 29}, },
            {{45, 113, -27}, {114, 114, 135}, {115, 122, 38}, },
            {{45, 95, -10}, {97, 118, 29}, {119, 119, 136}, {120, 122, 29}, },
            {{45, 95, -15}, {97, 97, 137}, {98, 122, 38}, },
            {{40, 40, 138}, {45, 122, -15}, },
            {{58, 58, 53}, },
            {{45, 107, -43}, {108, 108, 139}, {109, 122, 38}, },
            {{40, 40, 140}, {45, 47, -11}, {48, 49, 37}, {50, 50, 141}, {51, 57, 37}, {58, 122, -15}, },
            {{45, 57, -15}, {58, 58, 142}, {65, 122, -15}, },
            {{45, 57, -15}, {58, 58, 143}, {65, 122, -15}, },
            {{45, 109, -21}, {110, 110, 144}, {111, 122, 38}, },
            {{45, 45, 145}, {46, 122, -15}, },
            {{45, 95, -10}, {97, 97, 146}, {98, 122, 29}, },
            {{45, 104, -54}, {105, 105, 147}, {106, 122, 38}, },
            {{45, 95, -10}, {97, 104, 29}, {105, 105, 148}, {106, 122, 29}, },
            {{45, 98, -25}, {99, 99, 149}, {100, 122, 38}, },
            {{99, 99, 150}, {100, 100, 151}, {105, 105, 152}, },
            {{40, 40, 153}, {45, 122, -15}, },
            {{99, 99, 154}, {100, 100, 155}, {105, 105, 156}, },
            {{45, 58, -15}, {65, 79, 38}, {80, 80, 157}, {81, 90, 38}, {95, 122, -15}, },
            {{58, 58, 53}, },
            {{58, 58, 53}, },
            {{45, 115, -47}, {116, 116, 158}, {117, 122, 38}, },
            {{45, 95, -10}, {97, 101, 29}, {102, 102, 159}, {103, 122, 29}, },
            {{45, 95, -10}, {97, 111, 29}, {112, 112, 160}, {113, 122, 29}, },
            {{45, 99, -17}, {100, 100, 161}, {101, 122, 38}, },
            {{45, 95, -10}, {97, 115, 29}, {116, 116, 162}, {117, 122, 29}, },
            {{45, 100, -18}, {101, 101, 163}, {102, 122, 38}, },
            {{111, 111, 164}, },
            {{111, 111, 165}, },
            {{110, 110, 166}, },
            {{99, 99, 167}, {100, 100, 168}, {105, 105, 169}, },
            {{111, 111, 170}, },
            {{111, 111, 171}, },
            {{110, 110, 172}, },
            {{45, 110, -87}, {111, 111, 173}, {112, 122, 38}, },
            {{45, 57, -15}, {58, 58, 174}, {65, 122, -15}, },
            {{45, 104, -138}, {105, 105, 175}, {106, 122, 29}, },
            {{45, 111, -148}, {112, 112, 176}, {113, 122, 29}, },
            {{45, 45, 177}, {46, 122, -15}, },
            {{45, 95, -10}, {97, 103, 29}, {104, 104, 178}, {105, 122, 29}, },
            {{45, 57, -15}, {58, 58, 179}, {65, 122, -15}, },
            {{109, 109, 180}, },
            {{117, 117, 181}, },
            {{116, 116, 182}, },
            {{111, 111, 183}, },
            {{111, 111, 184}, },
            {{110, 110, 185}, },
            {{109, 109, 186}, },
            {{117, 117, 187}, },
            {{116, 116, 188}, },
            {{45, 95, -15}, {97, 118, 38}, {119, 119, 189}, {120, 122, 38}, },
            {{58, 58, 53}, },
            {{45, 95, -10}, {97, 107, 29}, {108, 108, 190}, {109, 122, 29}, },
            {{45, 104, -138}, {105, 105, 191}, {106, 122, 29}, },
            {{45, 95, -10}, {97, 110, 29}, {111, 111, 192}, {112, 122, 29}, },
            {{45, 45, 193}, {46, 122, -10}, },
            {{58, 58, 53}, },
            {{112, 112, 194}, },
            {{98, 98, 195}, },
            {{41, 41, 196}, },
            {{109, 109, 197}, },
            {{117, 117, 198}, },
            {{116, 116, 199}, },
            {{112, 112, 200}, },
            {{98, 98, 201}, },
            {{41, 41, 202}, },
            {{45, 58, -15}, {65, 67, 38}, {68, 68, 203}, {69, 90, 38}, {95, 122, -15}, },
            {{45, 95, -10}, {97, 100, 29}, {101, 101, 204}, {102, 122, 29}, },
            {{45, 95, -10}, {97, 109, 29}, {110, 110, 205}, {111, 122, 29}, },
            {{45, 111, -148}, {112, 112, 206}, {113, 122, 29}, },
            {{45, 111, -148}, {112, 112, 207}, {113, 116, 29}, {117, 117, 208}, {118, 122, 29}, },
            {{108, 108, 209}, },
            {{108, 108, 210}, },
            {{58, 58, 211}, },
            {{112, 112, 212}, },
            {{98, 98, 213}, },
            {{41, 41, 214}, },
            {{108, 108, 215}, },
            {{108, 108, 216}, },
            {{58, 58, 217}, },
            {{40, 40, 218}, {45, 122, -15}, },
            {{45, 57, -10}, {58, 58, 219}, {65, 122, -10}, },
            {{45, 95, -10}, {97, 102, 29}, {103, 103, 220}, {104, 122, 29}, },
            {{45, 100, -192}, {101, 101, 221}, {102, 122, 29}, },
            {{45, 95, -10}, {97, 113, 29}, {114, 114, 222}, {115, 122, 29}, },
            {{45, 95, -10}, {97, 114, 29}, {115, 115, 223}, {116, 122, 29}, },
            {{101, 101, 224}, },
            {{101, 101, 225}, },
            {},
            {{108, 108, 226}, },
            {{108, 108, 227}, },
            {{58, 58, 228}, },
            {{101, 101, 229}, },
            {{101, 101, 230}, },
            {},
            {{99, 99, 231}, {100, 100, 232}, {105, 105, 233}, },
            {},
            {{45, 57, -10}, {58, 58, 234}, {65, 122, -10}, },
            {{45, 113, -209}, {114, 114, 235}, {115, 122, 29}, },
            {{45, 100, -192}, {101, 101, 236}, {102, 122, 29}, },
            {{45, 100, -192}, {101, 101, 237}, {102, 122, 29}, },
            {{120, 120, 238}, },
            {{41, 41, 239}, },
            {{101, 101, 240}, },
            {{101, 101, 241}, },
            {},
            {{120, 120, 242}, },
            {{41, 41, 243}, },
            {{111, 111, 244}, },
            {{111, 111, 245}, },
            {{110, 110, 246}, },
            {},
            {{45, 95, -10}, {97, 97, 247}, {98, 122, 29}, },
            {{45, 95, -10}, {97, 99, 29}, {100, 100, 248}, {101, 122, 29}, },
            {{45, 113, -209}, {114, 114, 249}, {115, 122, 29}, },
            {{41, 41, 250}, },
            {{58, 58, 251}, },
            {{120, 120, 252}, },
            {{41, 41, 253}, },
            {{41, 41, 254}, },
            {{58, 58, 255}, },
            {{109, 109, 256}, },
            {{117, 117, 257}, },
            {{116, 116, 258}, },
            {{45, 115, -150}, {116, 116, 259}, {117, 122, 29}, },
            {{45, 100, -192}, {101, 101, 260}, {102, 122, 29}, },
            {{45, 45, 261}, {46, 122, -10}, },
            {{58, 58, 262}, },
            {},
            {{41, 41, 263}, },
            {{58, 58, 264}, },
            {{58, 58, 265}, },
            {},
            {{112, 112, 266}, },
            {{98, 98, 267}, },
            {{41, 41, 268}, },
            {{45, 110, -179}, {111, 111, 269}, {112, 122, 29}, },
            {{45, 101, -147}, {102, 102, 270}, {103, 122, 29}, },
            {{45, 99, -238}, {100, 100, 271}, {101, 122, 29}, },
            {},
            {{58, 58, 272}, },
            {},
            {},
            {{108, 108, 273}, },
            {{108, 108, 274}, },
            {{58, 58, 275}, },
            {{45, 113, -209}, {114, 114, 276}, {115, 122, 29}, },
            {{45, 104, -138}, {105, 105, 277}, {106, 122, 29}, },
            {{45, 100, -192}, {101, 101, 278}, {102, 122, 29}, },
            {},
            {{101, 101, 279}, },
            {{101, 101, 280}, },
            {},
            {{40, 40, 281}, {45, 122, -10}, },
            {{45, 109, -193}, {110, 110, 282}, {111, 122, 29}, },
            {{45, 101, -147}, {102, 102, 283}, {103, 122, 29}, },
            {{120, 120, 284}, },
            {{41, 41, 285}, },
            {{99, 99, 286}, {100, 100, 287}, {105, 105, 288}, },
            {{45, 100, -192}, {101, 101, 289}, {102, 122, 29}, },
            {{45, 104, -138}, {105, 105, 290}, {106, 122, 29}, },
            {{41, 41, 291}, },
            {{58, 58, 292}, },
            {{111, 111, 293}, },
            {{111, 111, 294}, },
            {{110, 110, 295}, },
            {{45, 99, -238}, {100, 100, 296}, {101, 122, 29}, },
            {{45, 109, -193}, {110, 110, 297}, {111, 122, 29}, },
            {{58, 58, 298}, },
            {},
            {{109, 109, 299}, },
            {{117, 117, 300}, },
            {{116, 116, 301}, },
            {{45, 45, 302}, {46, 122, -10}, },
            {{45, 100, -192}, {101, 101, 303}, {102, 122, 29}, },
            {},
            {{112, 112, 304}, },
            {{98, 98, 305}, },
            {{41, 41, 306}, },
            {{45, 108, -124}, {109, 109, 307}, {110, 122, 29}, },
            {{45, 99, -238}, {100, 100, 308}, {101, 122, 29}, },
            {{108, 108, 309}, },
            {{108, 108, 310}, },
            {{58, 58, 311}, },
            {{45, 95, -10}, {97, 97, 312}, {98, 122, 29}, },
            {{45, 45, 313}, {46, 122, -10}, },
            {{101, 101, 314}, },
            {{101, 101, 315}, },
            {},
            {{45, 111, -148}, {112, 112, 316}, {113, 122, 29}, },
            {{45, 108, -124}, {109, 109, 317}, {110, 122, 29}, },
            {{120, 120, 318}, },
            {{41, 41, 319}, },
            {{45, 111, -148}, {112, 112, 320}, {113, 122, 29}, },
            {{45, 95, -10}, {97, 97, 321}, {98, 122, 29}, },
            {{41, 41, 322}, },
            {{58, 58, 323}, },
            {{45, 104, -138}, {105, 105, 324}, {106, 122, 29}, },
            {{45, 111, -148}, {112, 112, 325}, {113, 122, 29}, },
            {{58, 58, 326}, },
            {},
            {{45, 109, -193}, {110, 110, 327}, {111, 122, 29}, },
            {{45, 111, -148}, {112, 112, 328}, {113, 122, 29}, },
            {},
            {{45, 102, -207}, {103, 103, 329}, {104, 122, 29}, },
            {{45, 104, -138}, {105, 105, 330}, {106, 122, 29}, },
            {{45, 57, -10}, {58, 58, 331}, {65, 122, -10}, },
            {{45, 109, -193}, {110, 110, 332}, {111, 122, 29}, },
            {},
            {{45, 102, -207}, {103, 103, 333}, {104, 122, 29}, },
            {{45, 57, -10}, {58, 58, 334}, {65, 122, -10}, },
            {},
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {-1, 31, 31, 31, 31, 25, 26, 27, 33, 33, -1, 33, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, -1, 33, 33, 33, -1, 33, 33, -1, -1, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 37, 37, 34, 34, 34, 34, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, 36, 37, 32, 32, 32, 32, 32, 32, 32, 32, 5, 32, 32, 32, 32, 32, 32, -1, 35, -1, -1, 32, 1, 32, 32, 32, 32, 32, 22, 32, 32, 32, 32, 32, 32, 6, -1, -1, 32, 32, 32, 33, 32, 33, 32, 32, 2, 32, 32, 32, 32, 32, 32, 33, 32, 33, 32, -1, 32, -1, 32, 0, 28, 32, 33, 33, 32, 33, 32, -1, -1, -1, -1, -1, -1, -1, 32, 32, 33, 33, 32, 33, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, 32, 3, 33, 33, 33, 33, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, 32, 33, 33, 33, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, 32, 33, 33, 33, 33, 33, -1, -1, 8, -1, -1, -1, -1, -1, 11, -1, 23, 33, 33, 33, 33, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, 24, 33, 33, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, 33, 33, 33, -1, 7, -1, -1, -1, 10, -1, -1, -1, 33, 33, 33, 9, -1, 19, 12, -1, -1, -1, 33, 33, 33, 21, -1, -1, 14, 33, 33, 33, -1, -1, -1, 33, 33, -1, -1, -1, -1, -1, 33, 33, -1, 13, -1, -1, -1, 33, 33, 15, -1, -1, -1, 33, 33, -1, -1, -1, 33, 33, -1, -1, 17, 33, 33, -1, -1, 33, 33, -1, -1, 33, 33, -1, 16, 33, 33, 18, 33, 33, 33, 33, 30, 33, 33, 29, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(@SuppressWarnings("hiding") int id)
        {
            this.id = id;
        }

        public int id()
        {
            return this.id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
